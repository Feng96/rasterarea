{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to rasterarea","text":"<p>This package provides a interactive map inherit from geemap and ipyleaflet. Visuallized GRACE data, pick a point and get the time series plot of the value in this point. Calculate the area of the pixel and more!</p> <ul> <li>Free software: MIT license</li> <li>Documentation: https://Feng96.github.io/rasterarea</li> </ul>"},{"location":"#install-instruction","title":"Install Instruction","text":"<ul> <li>Please have GDAL and localtileserver installed in your envirmental by command:</li> <li>conda install -c conda-forge gdal</li> <li>pip install localtileserver</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Interactive Map from ipyleaflet</li> <li>Inherit toolbar from geemap</li> <li>Visuallized GRACE satellite data</li> <li>Pick a point, return a plot of the time series plot of the value of the point</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the giswqs/pypackage project template.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"changelog/#v002-date","title":"v0.0.2 - Date","text":"<p>Improvement:</p> <ul> <li>test</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/Feng96/rasterarea/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>rasterarea could always use more documentation, whether as part of the official rasterarea docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/Feng96/rasterarea/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up rasterarea for local development.</p> <ol> <li> <p>Fork the rasterarea repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/rasterarea.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv rasterarea\n$ cd rasterarea/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 rasterarea tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/Feng96/rasterarea/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"foliummap/","title":"foliummap module","text":""},{"location":"foliummap/#rasterarea.foliummap.Map","title":"<code> Map            (Map)         </code>","text":"<p>Create a folium map object.</p> <p>Parameters:</p> Name Type Description Default <code>folium</code> <p>Creates a map in Folium </p> required Source code in <code>rasterarea/foliummap.py</code> <pre><code>class Map(folium.Map):\n\"\"\" Create a folium map object.\n\n    Args:\n        folium: Creates a map in Folium \n    \"\"\"\n    def __init__(self, center=[20,0], zoom=2, **kwargs) -&gt; None:\n\"\"\"\n\n        Args:\n            center (list, optional): The Map Center. Defaults to [20,0].\n            zoom (int, optional): Sets the zoom level of the map. Defaults to 2.\n        \"\"\"\n        super().__init__(location=center, zoom_start=zoom, **kwargs)\n\n    def add_tile_layer(self, url, name, attribution = \"\", **kwargs):\n\"\"\"Adds a tile layer to the map.\n\n        Args:\n            url (str): The URL of the tile layer.\n            name (str): The name of the tile layer\n            attribution (str, optional): The attribution of the tile layer. Defaults to **\n            \"\"\"\n        tile_layer = folium.TileLayer(\n            tiles= url,\n            name = name,\n            attr = attribution,\n            **kwargs\n        )\n        self.add_child(tile_layer)\n\n    def add_basemap(self, basemap, **kwargs):   \n\"\"\"Adds a basemap to the map\n\n        Args:\n            basemap: The basemap to add\n\n        Raises:\n            ValueError: Incorrect Basemap\n        \"\"\"\n        import xyzservices.providers as xyz\n\n        if basemap.lower() == 'roadmap':\n            url = 'http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name=basemap, **kwargs ) \n        elif basemap.lower() == 'satellite':\n            url = 'http://mt0.google.com/vt/lyrs=s&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name=basemap, **kwargs)\n        else:\n            try:\n                basemap = eval(f\"xyz.{basemap}\")\n                url = basemap.build_url()\n                attribution = basemap.attribution \n                self.add_tile_layer(url, name =basemap.name, attribution=attribution, **kwargs)\n            except:\n                raise ValueError(f\"Basemap '{basemap}' not found\")\n\n    def add_geojson(self, data, name=\"GeoJSON\", **kwargs):\n\"\"\"Adds a GeoJSON layer to the map.\n\n        Args:\n            data (dict): The GeoJSON data.\n            \"\"\"\n\n        if isinstance(data, str):\n            import json\n            with open(data, \"r\") as f:\n                data = json.load(f)\n\n        geojson = folium.GeoJson(data=data, name=name,**kwargs)\n        geojson.add_to(self)\n\n    def add_shp(self, data, name='Shapefile', **kwargs):\n\"\"\"Adds a Shapefile layer to the map.\n\n        Args:\n            data (str): the path to the Shapefile.\n        \"\"\"\n        import geopandas as gpd\n        gdf = gpd.read_file(data)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, name=name, **kwargs)\n\n    def add_vector(self, data, name = 'Vector Data', **kwargs):\n\"\"\"Adds Vector Data to the map.\n\n        Args:\n            data (str): the path to the Vector Data\n            \"\"\"\n        import geopandas as gdp\n        gdf = gdp.read_file(data)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, name = name, **kwargs)\n</code></pre>"},{"location":"foliummap/#rasterarea.foliummap.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>The Map Center. Defaults to [20,0].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>Sets the zoom level of the map. Defaults to 2.</p> <code>2</code> Source code in <code>rasterarea/foliummap.py</code> <pre><code>def __init__(self, center=[20,0], zoom=2, **kwargs) -&gt; None:\n\"\"\"\n\n    Args:\n        center (list, optional): The Map Center. Defaults to [20,0].\n        zoom (int, optional): Sets the zoom level of the map. Defaults to 2.\n    \"\"\"\n    super().__init__(location=center, zoom_start=zoom, **kwargs)\n</code></pre>"},{"location":"foliummap/#rasterarea.foliummap.Map.add_basemap","title":"<code>add_basemap(self, basemap, **kwargs)</code>","text":"<p>Adds a basemap to the map</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <p>The basemap to add</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>Incorrect Basemap</p> Source code in <code>rasterarea/foliummap.py</code> <pre><code>def add_basemap(self, basemap, **kwargs):   \n\"\"\"Adds a basemap to the map\n\n    Args:\n        basemap: The basemap to add\n\n    Raises:\n        ValueError: Incorrect Basemap\n    \"\"\"\n    import xyzservices.providers as xyz\n\n    if basemap.lower() == 'roadmap':\n        url = 'http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n        self.add_tile_layer(url, name=basemap, **kwargs ) \n    elif basemap.lower() == 'satellite':\n        url = 'http://mt0.google.com/vt/lyrs=s&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n        self.add_tile_layer(url, name=basemap, **kwargs)\n    else:\n        try:\n            basemap = eval(f\"xyz.{basemap}\")\n            url = basemap.build_url()\n            attribution = basemap.attribution \n            self.add_tile_layer(url, name =basemap.name, attribution=attribution, **kwargs)\n        except:\n            raise ValueError(f\"Basemap '{basemap}' not found\")\n</code></pre>"},{"location":"foliummap/#rasterarea.foliummap.Map.add_geojson","title":"<code>add_geojson(self, data, name='GeoJSON', **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>The GeoJSON data.</p> required Source code in <code>rasterarea/foliummap.py</code> <pre><code>def add_geojson(self, data, name=\"GeoJSON\", **kwargs):\n\"\"\"Adds a GeoJSON layer to the map.\n\n    Args:\n        data (dict): The GeoJSON data.\n        \"\"\"\n\n    if isinstance(data, str):\n        import json\n        with open(data, \"r\") as f:\n            data = json.load(f)\n\n    geojson = folium.GeoJson(data=data, name=name,**kwargs)\n    geojson.add_to(self)\n</code></pre>"},{"location":"foliummap/#rasterarea.foliummap.Map.add_shp","title":"<code>add_shp(self, data, name='Shapefile', **kwargs)</code>","text":"<p>Adds a Shapefile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>the path to the Shapefile.</p> required Source code in <code>rasterarea/foliummap.py</code> <pre><code>def add_shp(self, data, name='Shapefile', **kwargs):\n\"\"\"Adds a Shapefile layer to the map.\n\n    Args:\n        data (str): the path to the Shapefile.\n    \"\"\"\n    import geopandas as gpd\n    gdf = gpd.read_file(data)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, name=name, **kwargs)\n</code></pre>"},{"location":"foliummap/#rasterarea.foliummap.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution='', **kwargs)</code>","text":"<p>Adds a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the tile layer.</p> required <code>name</code> <code>str</code> <p>The name of the tile layer</p> required <code>attribution</code> <code>str</code> <p>The attribution of the tile layer. Defaults to **</p> <code>''</code> Source code in <code>rasterarea/foliummap.py</code> <pre><code>def add_tile_layer(self, url, name, attribution = \"\", **kwargs):\n\"\"\"Adds a tile layer to the map.\n\n    Args:\n        url (str): The URL of the tile layer.\n        name (str): The name of the tile layer\n        attribution (str, optional): The attribution of the tile layer. Defaults to **\n        \"\"\"\n    tile_layer = folium.TileLayer(\n        tiles= url,\n        name = name,\n        attr = attribution,\n        **kwargs\n    )\n    self.add_child(tile_layer)\n</code></pre>"},{"location":"foliummap/#rasterarea.foliummap.Map.add_vector","title":"<code>add_vector(self, data, name='Vector Data', **kwargs)</code>","text":"<p>Adds Vector Data to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>the path to the Vector Data</p> required Source code in <code>rasterarea/foliummap.py</code> <pre><code>def add_vector(self, data, name = 'Vector Data', **kwargs):\n\"\"\"Adds Vector Data to the map.\n\n    Args:\n        data (str): the path to the Vector Data\n        \"\"\"\n    import geopandas as gdp\n    gdf = gdp.read_file(data)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, name = name, **kwargs)\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install rasterarea, run this command in your terminal:</p> <pre><code>pip install rasterarea\n</code></pre> <p>This is the preferred method to install rasterarea, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for rasterarea can be downloaded from the Github repo.</p> <p>You can clone the public repository:</p> <pre><code>git clone git://github.com/Feng96/rasterarea\n</code></pre>"},{"location":"ipyleafletmap/","title":"ipyleafletmap module","text":""},{"location":"ipyleafletmap/#rasterarea.ipyleafletmap.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>rasterarea/ipyleafletmap.py</code> <pre><code>class Map(ipyleaflet.Map):\n\n    def __init__(self, center=[20, 0], zoom=2, **kwargs) -&gt; None:\n\n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs[\"scroll_wheel_zoom\"] = True\n\n        super().__init__(center=center, zoom=zoom, **kwargs)\n\n        if \"height\" not in kwargs:\n            self.layout.height = \"500px\"\n        else:\n            self.layout.height = kwargs[\"height\"]\n\n        if \"fullscreen_control\" not in kwargs:\n            kwargs[\"fullscreen_control\"] = True\n        if kwargs[\"fullscreen_control\"]:\n            self.add_fullscreen_control()\n\n        if \"layers_control\" not in kwargs:\n            kwargs[\"layers_control\"] = True\n        if kwargs[\"layers_control\"]:\n            self.add_layers_control()\n\n    def add_search_control(self, position=\"topleft\", **kwargs):\n\"\"\"Adds a search control to the map.\n\n        Args:\n            kwargs: Keyword arguments to pass to the search control.\n        \"\"\"\n        if \"url\" not in kwargs:\n            kwargs[\"url\"] = 'https://nominatim.openstreetmap.org/search?format=json&amp;q={s}'\n\n\n        search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n        self.add_control(search_control)\n\n    def add_draw_control(self, **kwargs):\n\"\"\"Adds a draw control to the map.\n\n        Args:\n            kwargs: Keyword arguments to pass to the draw control.\n        \"\"\"\n        draw_control = ipyleaflet.DrawControl(**kwargs)\n\n        draw_control.polyline =  {\n            \"shapeOptions\": {\n                \"color\": \"#6bc2e5\",\n                \"weight\": 8,\n                \"opacity\": 1.0\n            }\n        }\n        draw_control.polygon = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#6be5c3\",\n                \"color\": \"#6be5c3\",\n                \"fillOpacity\": 1.0\n            },\n            \"drawError\": {\n                \"color\": \"#dd253b\",\n                \"message\": \"Oups!\"\n            },\n            \"allowIntersection\": False\n        }\n        draw_control.circle = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#efed69\",\n                \"color\": \"#efed69\",\n                \"fillOpacity\": 1.0\n            }\n        }\n        draw_control.rectangle = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#fca45d\",\n                \"color\": \"#fca45d\",\n                \"fillOpacity\": 1.0\n            }\n        }\n\n        self.add_control(draw_control)\n\n    def add_layers_control(self, position=\"topright\"):\n\"\"\"Adds a layers control to the map.\n\n        Args:\n            kwargs: Keyword arguments to pass to the layers control.\n        \"\"\"\n        layers_control = ipyleaflet.LayersControl(position=position)\n        self.add_control(layers_control)\n\n    def add_fullscreen_control(self, position=\"topleft\"):\n\"\"\"Adds a fullscreen control to the map.\n\n        Args:\n            kwargs: Keyword arguments to pass to the fullscreen control.\n        \"\"\"\n        fullscreen_control = ipyleaflet.FullScreenControl(position=position)\n        self.add_control(fullscreen_control)\n\n    def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n\"\"\"Adds a tile layer to the map.\n\n        Args:\n            url (str): The URL template of the tile layer.\n            attribution (str): The attribution of the tile layer.\n            name (str, optional): The name of the tile layer. Defaults to \"OpenStreetMap\".\n            kwargs: Keyword arguments to pass to the tile layer.\n        \"\"\"\n        tile_layer = ipyleaflet.TileLayer(url=url, attribution=attribution, name=name, **kwargs)\n        self.add_layer(tile_layer)\n\n    def add_basemap(self, basemap, **kwargs):\n\n        import xyzservices.providers as xyz\n\n        if basemap.lower() == \"roadmap\":\n            url = 'http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name=basemap, **kwargs)\n        elif basemap.lower() == \"satellite\":\n            url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name=basemap, **kwargs)\n        else:\n            try:\n                basemap = eval(f\"xyz.{basemap}\")\n                url = basemap.build_url()\n                attribution = basemap.attribution\n                self.add_tile_layer(url, name=basemap.name, attribution=attribution, **kwargs)\n            except:\n                raise ValueError(f\"Basemap '{basemap}' not found.\")\n\n    def add_geojson(self, data, name='GeoJSON', **kwargs):\n\"\"\"Adds a GeoJSON layer to the map.\n\n        Args:\n            data (dict): The GeoJSON data.\n        \"\"\"\n        if isinstance(data, str):\n            import json\n            with open(data, \"r\") as f:\n                data = json.load(f)\n        geojson = ipyleaflet.GeoJSON(data=data,name=name, **kwargs)\n        self.add_layer(geojson)\n\n\n    def add_shp(self, data, name='Shapefile', **kwargs):\n\"\"\"Adds a Shapefile layer to the map.\n\n        Args:\n            data (str): The path to the Shapefile.\n        \"\"\"\n        import geopandas as gpd\n        gdf = gpd.read_file(data)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, name=name, **kwargs)\n\n    def add_vector(self, data, name='Vector', **kwargs):\n\"\"\"Adds a vector layer to the map.\n\n        Args:\n            data (str): The path to the vector file.\n        \"\"\"\n        import geopandas as gpd\n        gdf = gpd.read_file(data)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, name=name, **kwargs)\n\n    def add_raster(self, url, name='Raster', fit_bounds=True, **kwargs):\n\"\"\"Adds a raster layer to the map.\n\n        Args:\n            url (str): The URL of the raster layer.\n            name (str, optional): The name of the raster layer. Defaults to 'Raster'.\n            fit_bounds (bool, optional): Whether to fit the map bounds to the raster layer. Defaults to True.\n        \"\"\"\n        import httpx\n\n        titiler_endpoint = \"https://titiler.xyz\"\n\n        r = httpx.get(\n            f\"{titiler_endpoint}/cog/info\",\n            params = {\n                \"url\": url,\n            }\n        ).json()\n\n        bounds = r[\"bounds\"]\n\n        r = httpx.get(\n            f\"{titiler_endpoint}/cog/tilejson.json\",\n            params = {\n                \"url\": url,\n            }\n        ).json()\n\n        tile = r[\"tiles\"][0]\n\n        self.add_tile_layer(url=tile, name=name, **kwargs)\n\n        if fit_bounds:\n            bbox = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\n            self.fit_bounds(bbox)\n\n    def add_image(self, url, width, height, position = 'bottomright',**kwargs):\n\"\"\"Add an image to the map.\n\n        Args:\n            url (str): The URL of the image.\n            width (int): The width of the image.\n            height (int): The height of the image.\n            position (str, optional): The position of the image. Defaults to 'bottomright'.\n        \"\"\"\n        widget = widgets.HTML(value = f'&lt;img src=\"{url}\" width=\"{width}\" height=\"{height}\"&gt;')\n        control = WidgetControl(widget=widget, position=position)\n        self.add(control)\n\n\n    def csv_to_shp(in_csv,out_shp, x=\"longitude\", y=\"latitude\"):\n\"\"\"\n        This function takes a csv file and converts it to a shapefile.\n        \"\"\"\n\n        # Read in the csv file\n        df = pd.read_csv(in_csv)\n\n        # Create a geometry column\n        geometry = [Point(xy) for xy in zip(df[x], df[y])]\n\n        # Create a geodataframe\n        gdf = gpd.GeoDataFrame(df, geometry=geometry)\n\n        # Save the geodataframe as a shapefile\n        gdf.to_file(out_shp,driver='ESRI Shapefile')\n\n        return gdf\n\n\n    def csv_to_geojson(in_csv, out_geojson, x=\"longitude\", y=\"latitude\"):\n\"\"\"\n        This function takes a csv file and converts it to a geojson file.\n        \"\"\"\n\n        # Read in the csv file\n        df = pd.read_csv(in_csv)\n\n        # Create a geometry column\n        geometry = [Point(xy) for xy in zip(df[x], df[y])]\n\n        # Create a geodataframe\n        gdf = gpd.GeoDataFrame(df, geometry=geometry)\n\n        # Save the geodataframe as a geojson file\n        gdf.to_file(out_geojson, driver=\"GeoJSON\")\n\n        return gdf\n\n\n    def add_marker_from_csv(self, in_csv, x=\"longitude\", y=\"latitude\", label=None, layer_name=\"Marker cluster\"):\n\"\"\"\n        This function takes a csv file and adds a marker cluster to the map.\n        \"\"\"\n\n        # Read in the csv file\n        df = pd.read_csv(in_csv)\n\n        # Create a geometry column\n        geometry = [Point(xy) for xy in zip(df[x], df[y])]\n\n        # Create a geodataframe\n        gdf = gpd.GeoDataFrame(df, geometry=geometry)\n\n        # Create a marker cluster\n        marker_cluster = ipyleaflet.MarkerCluster(\n            markers=[ipyleaflet.Marker(location=[point.y, point.x]) for point in gdf.geometry]\n        )\n\n        # Add the marker cluster to the map\n        self.add_layer(marker_cluster)\n\n        return marker_cluster\n\n\n    def add_toolbar(self, position='topright', **kwargs):\n\"\"\"Adds a toolbar to the map.\n\n        Args:\n            toolbar (str, optional): The toolbar to add. Defaults to 'draw'.\n            position (str, optional): The position of the toolbar. Defaults to 'topright'.\n        \"\"\"\n        widget_width = \"250px\"\n        padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n        toolbar_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Toolbar\",\n            icon=\"wrench\",\n            layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n        )\n\n        close_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Close the tool\",\n            icon=\"times\",\n            button_style=\"primary\",\n            layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n        )\n        toolbar = widgets.HBox([toolbar_button])\n\n        def toolbar_click(change):\n            if change[\"new\"]:\n                toolbar.children = [toolbar_button, close_button]\n            else:\n                toolbar.children = [toolbar_button]\n\n        toolbar_button.observe(toolbar_click, \"value\")\n\n        def close_click(change):\n            if change[\"new\"]:\n                toolbar_button.close()\n                close_button.close()\n                toolbar.close()\n\n        close_button.observe(close_click, \"value\")\n        rows = 2\n        cols = 2\n        grid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\"))\n        icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\n        for i in range(rows):\n            for j in range(cols):\n                grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j], \n                                            layout=widgets.Layout(width=\"28px\", padding=\"0px\"))\n        toolbar = widgets.VBox([toolbar_button])\n        def toolbar_click(change):\n            if change[\"new\"]:\n                toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n            else:\n                toolbar.children = [toolbar_button]\n\n        toolbar_button.observe(toolbar_click, \"value\")\n\n        toolbar_ctrl = WidgetControl(widget=toolbar, position=position)\n\n        output = widgets.Output()\n        output_ctrl = WidgetControl(widget=output, position=\"bottomright\")\n        def tool_click(b):    \n            with output:\n                output.clear_output()\n                print(f\"You clicked the {b.icon} button\")\n\n        for i in range(rows):\n            for j in range(cols):\n                tool = grid[i, j]\n                tool.on_click(tool_click)\n\n        with output:\n            output.clear_output()\n            print(\"Click on a button to see the output\")\n\n        basemap = widgets.Dropdown(\n            options=[\"roadmap\", \"satellite\"],\n            value=None,\n            description=\"Basemap:\",\n            style={\"description_width\": \"initial\"},\n            layout=widgets.Layout(width=\"200px\"),\n        )\n        basemap_ctrl = WidgetControl(widget=basemap, position=\"topright\")\n\n        csv_input = widgets.Text(\n            value='',\n            placeholder='Type the path to the CSV file',\n            description='CSV File:',\n            disabled=False\n        )\n\n        csv_input_ctrl = WidgetControl(widget=csv_input, position=\"topright\")\n\n        def tool_click(b):    \n            with output:\n                output.clear_output()\n                print(f\"You clicked the {b.icon} button\")\n\n                if b.icon == \"map\":\n                    self.add_control(basemap_ctrl)\n                elif b.icon == \"folder-open\":\n                    self.add_control(csv_input_ctrl)\n\n        for i in range(rows):\n            for j in range(cols):\n                tool = grid[i, j]\n                tool.on_click(tool_click)\n\n        def change_basemap(change):\n            if change[\"new\"]:\n                self.add_basemap(basemap.value)\n\n\n        def change_csv_input(change):\n            if change[\"new\"]:\n                csv_file = csv_input.value\n                self.add_marker_from_csv(in_csv=csv_file, x=\"longitude\", y=\"latitude\")\n\n        csv_input.observe(change_csv_input, names=\"value\")\n\n        basemap.observe(change_basemap, names='value')\n\n        self.add_control(toolbar_ctrl)\n</code></pre>"},{"location":"ipyleafletmap/#rasterarea.ipyleafletmap.Map.add_draw_control","title":"<code>add_draw_control(self, **kwargs)</code>","text":"<p>Adds a draw control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>Keyword arguments to pass to the draw control.</p> <code>{}</code> Source code in <code>rasterarea/ipyleafletmap.py</code> <pre><code>def add_draw_control(self, **kwargs):\n\"\"\"Adds a draw control to the map.\n\n    Args:\n        kwargs: Keyword arguments to pass to the draw control.\n    \"\"\"\n    draw_control = ipyleaflet.DrawControl(**kwargs)\n\n    draw_control.polyline =  {\n        \"shapeOptions\": {\n            \"color\": \"#6bc2e5\",\n            \"weight\": 8,\n            \"opacity\": 1.0\n        }\n    }\n    draw_control.polygon = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#6be5c3\",\n            \"color\": \"#6be5c3\",\n            \"fillOpacity\": 1.0\n        },\n        \"drawError\": {\n            \"color\": \"#dd253b\",\n            \"message\": \"Oups!\"\n        },\n        \"allowIntersection\": False\n    }\n    draw_control.circle = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#efed69\",\n            \"color\": \"#efed69\",\n            \"fillOpacity\": 1.0\n        }\n    }\n    draw_control.rectangle = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#fca45d\",\n            \"color\": \"#fca45d\",\n            \"fillOpacity\": 1.0\n        }\n    }\n\n    self.add_control(draw_control)\n</code></pre>"},{"location":"ipyleafletmap/#rasterarea.ipyleafletmap.Map.add_fullscreen_control","title":"<code>add_fullscreen_control(self, position='topleft')</code>","text":"<p>Adds a fullscreen control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>Keyword arguments to pass to the fullscreen control.</p> required Source code in <code>rasterarea/ipyleafletmap.py</code> <pre><code>def add_fullscreen_control(self, position=\"topleft\"):\n\"\"\"Adds a fullscreen control to the map.\n\n    Args:\n        kwargs: Keyword arguments to pass to the fullscreen control.\n    \"\"\"\n    fullscreen_control = ipyleaflet.FullScreenControl(position=position)\n    self.add_control(fullscreen_control)\n</code></pre>"},{"location":"ipyleafletmap/#rasterarea.ipyleafletmap.Map.add_geojson","title":"<code>add_geojson(self, data, name='GeoJSON', **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>The GeoJSON data.</p> required Source code in <code>rasterarea/ipyleafletmap.py</code> <pre><code>def add_geojson(self, data, name='GeoJSON', **kwargs):\n\"\"\"Adds a GeoJSON layer to the map.\n\n    Args:\n        data (dict): The GeoJSON data.\n    \"\"\"\n    if isinstance(data, str):\n        import json\n        with open(data, \"r\") as f:\n            data = json.load(f)\n    geojson = ipyleaflet.GeoJSON(data=data,name=name, **kwargs)\n    self.add_layer(geojson)\n</code></pre>"},{"location":"ipyleafletmap/#rasterarea.ipyleafletmap.Map.add_image","title":"<code>add_image(self, url, width, height, position='bottomright', **kwargs)</code>","text":"<p>Add an image to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the image.</p> required <code>width</code> <code>int</code> <p>The width of the image.</p> required <code>height</code> <code>int</code> <p>The height of the image.</p> required <code>position</code> <code>str</code> <p>The position of the image. Defaults to 'bottomright'.</p> <code>'bottomright'</code> Source code in <code>rasterarea/ipyleafletmap.py</code> <pre><code>def add_image(self, url, width, height, position = 'bottomright',**kwargs):\n\"\"\"Add an image to the map.\n\n    Args:\n        url (str): The URL of the image.\n        width (int): The width of the image.\n        height (int): The height of the image.\n        position (str, optional): The position of the image. Defaults to 'bottomright'.\n    \"\"\"\n    widget = widgets.HTML(value = f'&lt;img src=\"{url}\" width=\"{width}\" height=\"{height}\"&gt;')\n    control = WidgetControl(widget=widget, position=position)\n    self.add(control)\n</code></pre>"},{"location":"ipyleafletmap/#rasterarea.ipyleafletmap.Map.add_layers_control","title":"<code>add_layers_control(self, position='topright')</code>","text":"<p>Adds a layers control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>Keyword arguments to pass to the layers control.</p> required Source code in <code>rasterarea/ipyleafletmap.py</code> <pre><code>def add_layers_control(self, position=\"topright\"):\n\"\"\"Adds a layers control to the map.\n\n    Args:\n        kwargs: Keyword arguments to pass to the layers control.\n    \"\"\"\n    layers_control = ipyleaflet.LayersControl(position=position)\n    self.add_control(layers_control)\n</code></pre>"},{"location":"ipyleafletmap/#rasterarea.ipyleafletmap.Map.add_marker_from_csv","title":"<code>add_marker_from_csv(self, in_csv, x='longitude', y='latitude', label=None, layer_name='Marker cluster')</code>","text":"<p>This function takes a csv file and adds a marker cluster to the map.</p> Source code in <code>rasterarea/ipyleafletmap.py</code> <pre><code>def add_marker_from_csv(self, in_csv, x=\"longitude\", y=\"latitude\", label=None, layer_name=\"Marker cluster\"):\n\"\"\"\n    This function takes a csv file and adds a marker cluster to the map.\n    \"\"\"\n\n    # Read in the csv file\n    df = pd.read_csv(in_csv)\n\n    # Create a geometry column\n    geometry = [Point(xy) for xy in zip(df[x], df[y])]\n\n    # Create a geodataframe\n    gdf = gpd.GeoDataFrame(df, geometry=geometry)\n\n    # Create a marker cluster\n    marker_cluster = ipyleaflet.MarkerCluster(\n        markers=[ipyleaflet.Marker(location=[point.y, point.x]) for point in gdf.geometry]\n    )\n\n    # Add the marker cluster to the map\n    self.add_layer(marker_cluster)\n\n    return marker_cluster\n</code></pre>"},{"location":"ipyleafletmap/#rasterarea.ipyleafletmap.Map.add_raster","title":"<code>add_raster(self, url, name='Raster', fit_bounds=True, **kwargs)</code>","text":"<p>Adds a raster layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the raster layer.</p> required <code>name</code> <code>str</code> <p>The name of the raster layer. Defaults to 'Raster'.</p> <code>'Raster'</code> <code>fit_bounds</code> <code>bool</code> <p>Whether to fit the map bounds to the raster layer. Defaults to True.</p> <code>True</code> Source code in <code>rasterarea/ipyleafletmap.py</code> <pre><code>def add_raster(self, url, name='Raster', fit_bounds=True, **kwargs):\n\"\"\"Adds a raster layer to the map.\n\n    Args:\n        url (str): The URL of the raster layer.\n        name (str, optional): The name of the raster layer. Defaults to 'Raster'.\n        fit_bounds (bool, optional): Whether to fit the map bounds to the raster layer. Defaults to True.\n    \"\"\"\n    import httpx\n\n    titiler_endpoint = \"https://titiler.xyz\"\n\n    r = httpx.get(\n        f\"{titiler_endpoint}/cog/info\",\n        params = {\n            \"url\": url,\n        }\n    ).json()\n\n    bounds = r[\"bounds\"]\n\n    r = httpx.get(\n        f\"{titiler_endpoint}/cog/tilejson.json\",\n        params = {\n            \"url\": url,\n        }\n    ).json()\n\n    tile = r[\"tiles\"][0]\n\n    self.add_tile_layer(url=tile, name=name, **kwargs)\n\n    if fit_bounds:\n        bbox = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\n        self.fit_bounds(bbox)\n</code></pre>"},{"location":"ipyleafletmap/#rasterarea.ipyleafletmap.Map.add_search_control","title":"<code>add_search_control(self, position='topleft', **kwargs)</code>","text":"<p>Adds a search control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>Keyword arguments to pass to the search control.</p> <code>{}</code> Source code in <code>rasterarea/ipyleafletmap.py</code> <pre><code>def add_search_control(self, position=\"topleft\", **kwargs):\n\"\"\"Adds a search control to the map.\n\n    Args:\n        kwargs: Keyword arguments to pass to the search control.\n    \"\"\"\n    if \"url\" not in kwargs:\n        kwargs[\"url\"] = 'https://nominatim.openstreetmap.org/search?format=json&amp;q={s}'\n\n\n    search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n    self.add_control(search_control)\n</code></pre>"},{"location":"ipyleafletmap/#rasterarea.ipyleafletmap.Map.add_shp","title":"<code>add_shp(self, data, name='Shapefile', **kwargs)</code>","text":"<p>Adds a Shapefile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The path to the Shapefile.</p> required Source code in <code>rasterarea/ipyleafletmap.py</code> <pre><code>def add_shp(self, data, name='Shapefile', **kwargs):\n\"\"\"Adds a Shapefile layer to the map.\n\n    Args:\n        data (str): The path to the Shapefile.\n    \"\"\"\n    import geopandas as gpd\n    gdf = gpd.read_file(data)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, name=name, **kwargs)\n</code></pre>"},{"location":"ipyleafletmap/#rasterarea.ipyleafletmap.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution='', **kwargs)</code>","text":"<p>Adds a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL template of the tile layer.</p> required <code>attribution</code> <code>str</code> <p>The attribution of the tile layer.</p> <code>''</code> <code>name</code> <code>str</code> <p>The name of the tile layer. Defaults to \"OpenStreetMap\".</p> required <code>kwargs</code> <p>Keyword arguments to pass to the tile layer.</p> <code>{}</code> Source code in <code>rasterarea/ipyleafletmap.py</code> <pre><code>def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n\"\"\"Adds a tile layer to the map.\n\n    Args:\n        url (str): The URL template of the tile layer.\n        attribution (str): The attribution of the tile layer.\n        name (str, optional): The name of the tile layer. Defaults to \"OpenStreetMap\".\n        kwargs: Keyword arguments to pass to the tile layer.\n    \"\"\"\n    tile_layer = ipyleaflet.TileLayer(url=url, attribution=attribution, name=name, **kwargs)\n    self.add_layer(tile_layer)\n</code></pre>"},{"location":"ipyleafletmap/#rasterarea.ipyleafletmap.Map.add_toolbar","title":"<code>add_toolbar(self, position='topright', **kwargs)</code>","text":"<p>Adds a toolbar to the map.</p> <p>Parameters:</p> Name Type Description Default <code>toolbar</code> <code>str</code> <p>The toolbar to add. Defaults to 'draw'.</p> required <code>position</code> <code>str</code> <p>The position of the toolbar. Defaults to 'topright'.</p> <code>'topright'</code> Source code in <code>rasterarea/ipyleafletmap.py</code> <pre><code>def add_toolbar(self, position='topright', **kwargs):\n\"\"\"Adds a toolbar to the map.\n\n    Args:\n        toolbar (str, optional): The toolbar to add. Defaults to 'draw'.\n        position (str, optional): The position of the toolbar. Defaults to 'topright'.\n    \"\"\"\n    widget_width = \"250px\"\n    padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n    toolbar_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Toolbar\",\n        icon=\"wrench\",\n        layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n    )\n\n    close_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Close the tool\",\n        icon=\"times\",\n        button_style=\"primary\",\n        layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n    )\n    toolbar = widgets.HBox([toolbar_button])\n\n    def toolbar_click(change):\n        if change[\"new\"]:\n            toolbar.children = [toolbar_button, close_button]\n        else:\n            toolbar.children = [toolbar_button]\n\n    toolbar_button.observe(toolbar_click, \"value\")\n\n    def close_click(change):\n        if change[\"new\"]:\n            toolbar_button.close()\n            close_button.close()\n            toolbar.close()\n\n    close_button.observe(close_click, \"value\")\n    rows = 2\n    cols = 2\n    grid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\"))\n    icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\n    for i in range(rows):\n        for j in range(cols):\n            grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j], \n                                        layout=widgets.Layout(width=\"28px\", padding=\"0px\"))\n    toolbar = widgets.VBox([toolbar_button])\n    def toolbar_click(change):\n        if change[\"new\"]:\n            toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n        else:\n            toolbar.children = [toolbar_button]\n\n    toolbar_button.observe(toolbar_click, \"value\")\n\n    toolbar_ctrl = WidgetControl(widget=toolbar, position=position)\n\n    output = widgets.Output()\n    output_ctrl = WidgetControl(widget=output, position=\"bottomright\")\n    def tool_click(b):    \n        with output:\n            output.clear_output()\n            print(f\"You clicked the {b.icon} button\")\n\n    for i in range(rows):\n        for j in range(cols):\n            tool = grid[i, j]\n            tool.on_click(tool_click)\n\n    with output:\n        output.clear_output()\n        print(\"Click on a button to see the output\")\n\n    basemap = widgets.Dropdown(\n        options=[\"roadmap\", \"satellite\"],\n        value=None,\n        description=\"Basemap:\",\n        style={\"description_width\": \"initial\"},\n        layout=widgets.Layout(width=\"200px\"),\n    )\n    basemap_ctrl = WidgetControl(widget=basemap, position=\"topright\")\n\n    csv_input = widgets.Text(\n        value='',\n        placeholder='Type the path to the CSV file',\n        description='CSV File:',\n        disabled=False\n    )\n\n    csv_input_ctrl = WidgetControl(widget=csv_input, position=\"topright\")\n\n    def tool_click(b):    \n        with output:\n            output.clear_output()\n            print(f\"You clicked the {b.icon} button\")\n\n            if b.icon == \"map\":\n                self.add_control(basemap_ctrl)\n            elif b.icon == \"folder-open\":\n                self.add_control(csv_input_ctrl)\n\n    for i in range(rows):\n        for j in range(cols):\n            tool = grid[i, j]\n            tool.on_click(tool_click)\n\n    def change_basemap(change):\n        if change[\"new\"]:\n            self.add_basemap(basemap.value)\n\n\n    def change_csv_input(change):\n        if change[\"new\"]:\n            csv_file = csv_input.value\n            self.add_marker_from_csv(in_csv=csv_file, x=\"longitude\", y=\"latitude\")\n\n    csv_input.observe(change_csv_input, names=\"value\")\n\n    basemap.observe(change_basemap, names='value')\n\n    self.add_control(toolbar_ctrl)\n</code></pre>"},{"location":"ipyleafletmap/#rasterarea.ipyleafletmap.Map.add_vector","title":"<code>add_vector(self, data, name='Vector', **kwargs)</code>","text":"<p>Adds a vector layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The path to the vector file.</p> required Source code in <code>rasterarea/ipyleafletmap.py</code> <pre><code>def add_vector(self, data, name='Vector', **kwargs):\n\"\"\"Adds a vector layer to the map.\n\n    Args:\n        data (str): The path to the vector file.\n    \"\"\"\n    import geopandas as gpd\n    gdf = gpd.read_file(data)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, name=name, **kwargs)\n</code></pre>"},{"location":"ipyleafletmap/#rasterarea.ipyleafletmap.Map.csv_to_geojson","title":"<code>csv_to_geojson(in_csv, out_geojson, x='longitude', y='latitude')</code>","text":"<p>This function takes a csv file and converts it to a geojson file.</p> Source code in <code>rasterarea/ipyleafletmap.py</code> <pre><code>def csv_to_geojson(in_csv, out_geojson, x=\"longitude\", y=\"latitude\"):\n\"\"\"\n    This function takes a csv file and converts it to a geojson file.\n    \"\"\"\n\n    # Read in the csv file\n    df = pd.read_csv(in_csv)\n\n    # Create a geometry column\n    geometry = [Point(xy) for xy in zip(df[x], df[y])]\n\n    # Create a geodataframe\n    gdf = gpd.GeoDataFrame(df, geometry=geometry)\n\n    # Save the geodataframe as a geojson file\n    gdf.to_file(out_geojson, driver=\"GeoJSON\")\n\n    return gdf\n</code></pre>"},{"location":"ipyleafletmap/#rasterarea.ipyleafletmap.Map.csv_to_shp","title":"<code>csv_to_shp(in_csv, out_shp, x='longitude', y='latitude')</code>","text":"<p>This function takes a csv file and converts it to a shapefile.</p> Source code in <code>rasterarea/ipyleafletmap.py</code> <pre><code>def csv_to_shp(in_csv,out_shp, x=\"longitude\", y=\"latitude\"):\n\"\"\"\n    This function takes a csv file and converts it to a shapefile.\n    \"\"\"\n\n    # Read in the csv file\n    df = pd.read_csv(in_csv)\n\n    # Create a geometry column\n    geometry = [Point(xy) for xy in zip(df[x], df[y])]\n\n    # Create a geodataframe\n    gdf = gpd.GeoDataFrame(df, geometry=geometry)\n\n    # Save the geodataframe as a shapefile\n    gdf.to_file(out_shp,driver='ESRI Shapefile')\n\n    return gdf\n</code></pre>"},{"location":"rasterarea/","title":"rasterarea module","text":"<p>Main module.</p>"},{"location":"rasterarea/#rasterarea.rasterarea.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>rasterarea/rasterarea.py</code> <pre><code>class Map(geemap.Map):\n\n    def __init__(self, center=[20, 0], zoom=2, **kwargs) -&gt; None:\n\n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs[\"scroll_wheel_zoom\"] = True\n\n        super().__init__(center=center, zoom=zoom, **kwargs)\n        self.toolbar = Toolbar(parent=self)\n\n\n    def add_basemap(self, basemap, **kwargs):\n\n        import xyzservices.providers as xyz\n\n        if basemap.lower() == \"roadmap\":\n            url = 'http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name=basemap, **kwargs)\n        elif basemap.lower() == \"satellite\":\n            url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name=basemap, **kwargs)\n        else:\n            try:\n                basemap = eval(f\"xyz.{basemap}\")\n                url = basemap.build_url()\n                attribution = basemap.attribution\n                self.add_tile_layer(url, name=basemap.name, attribution=attribution, **kwargs)\n            except:\n                raise ValueError(f\"Basemap '{basemap}' not found.\")\n\n    def add_raster(\n        self,\n        source,\n        bands=1,\n        layer_name=None,\n        palette=None,\n        vmin=None,\n        vmax=None,\n        nodata=None,\n        attribute=None\n    ):\n\"\"\"Add a local raster dataset to the map.\n\n            If you are using this function in JupyterHub on a remote server and the raster does not render properly, try\n            running the following two lines before calling this function:\n\n            import os\n            os.environ['LOCALTILESERVER_CLIENT_PREFIX'] = 'proxy/{port}'\n\n        Args:\n            source (str): The path to the GeoTIFF file or the URL of the Cloud Optimized GeoTIFF.\n            band (int, optional): The band to use. Band indexing starts at 1. Defaults to None.\n            palette (str, optional): The name of the color palette from `palettable` to use when plotting a single band. See https://jiffyclub.github.io/palettable. Default is greyscale\n            vmin (float, optional): The minimum value to use when colormapping the palette when plotting a single band. Defaults to None.\n            vmax (float, optional): The maximum value to use when colormapping the palette when plotting a single band. Defaults to None.\n            nodata (float, optional): The value from the band to use to interpret as not valid data. Defaults to None.\n            attribution (str, optional): Attribution for the source raster. This defaults to a message about it being a local file.. Defaults to None.\n            layer_name (str, optional): The layer name to use. Defaults to None.\n        \"\"\"\n        super().add_raster(source=source, bands=bands, layer_name=layer_name, palette=palette, vmin=vmin, vmax=vmax, nodata=nodata, attribute=attribute)\n\n\n    def add_toolbar(self, position='topright', **kwargs):\n\"\"\"Adds a toolbar to the map.\n\n        Args:\n            toolbar (str, optional): The toolbar to add. Defaults to 'draw'.\n            position (str, optional): The position of the toolbar. Defaults to 'topright'.\n        \"\"\"\n        widget_width = \"250px\"\n        padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n        toolbar_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Toolbar\",\n            icon=\"wrench\",\n            layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n        )\n\n        close_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Close the tool\",\n            icon=\"times\",\n            button_style=\"primary\",\n            layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n        )\n        toolbar = widgets.HBox([toolbar_button])\n\n        def toolbar_click(change):\n            if change[\"new\"]:\n                toolbar.children = [toolbar_button, close_button]\n            else:\n                toolbar.children = [toolbar_button]\n\n        toolbar_button.observe(toolbar_click, \"value\")\n\n        def close_click(change):\n            if change[\"new\"]:\n                toolbar_button.close()\n                close_button.close()\n                toolbar.close()\n\n        close_button.observe(close_click, \"value\")\n        rows = 2\n        cols = 2\n        grid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\"))\n        icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\n        for i in range(rows):\n            for j in range(cols):\n                grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j], \n                                            layout=widgets.Layout(width=\"28px\", padding=\"0px\"))\n        toolbar = widgets.VBox([toolbar_button])\n        def toolbar_click(change):\n            if change[\"new\"]:\n                toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n            else:\n                toolbar.children = [toolbar_button]\n\n        toolbar_button.observe(toolbar_click, \"value\")\n\n        toolbar_ctrl = WidgetControl(widget=toolbar, position=position)\n\n        output = widgets.Output()\n        output_ctrl = WidgetControl(widget=output, position=\"bottomright\")\n        def tool_click(b):    \n            with output:\n                output.clear_output()\n                print(f\"You clicked the {b.icon} button\")\n\n        for i in range(rows):\n            for j in range(cols):\n                tool = grid[i, j]\n                tool.on_click(tool_click)\n\n        with output:\n            output.clear_output()\n            print(\"Click on a button to see the output\")\n\n        basemap = widgets.Dropdown(\n            options=[\"roadmap\", \"satellite\"],\n            value=None,\n            description=\"Basemap:\",\n            style={\"description_width\": \"initial\"},\n            layout=widgets.Layout(width=\"200px\"),\n        )\n        basemap_ctrl = WidgetControl(widget=basemap, position=\"topright\")\n\n        def tool_click(b):    \n            with output:\n                output.clear_output()\n                print(f\"You clicked the {b.icon} button\")\n\n                if b.icon == \"map\":\n                    self.add_control(basemap_ctrl)\n                if b.icon == \"folder-open\":\n                    self.toolbar.setup_interactive_plot()\n\n        for i in range(rows):\n            for j in range(cols):\n                tool = grid[i, j]\n                tool.on_click(tool_click)\n\n        def change_basemap(change):\n            if change[\"new\"]:\n                self.add_basemap(basemap.value)\n\n        basemap.observe(change_basemap, names='value')\n        self.add_control(toolbar_ctrl)\n</code></pre>"},{"location":"rasterarea/#rasterarea.rasterarea.Map.add_basemap","title":"<code>add_basemap(self, basemap, **kwargs)</code>","text":"<p>Adds a basemap to the map.</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str</code> <p>Can be one of string from basemaps. Defaults to 'HYBRID'.</p> required Source code in <code>rasterarea/rasterarea.py</code> <pre><code>def add_basemap(self, basemap, **kwargs):\n\n    import xyzservices.providers as xyz\n\n    if basemap.lower() == \"roadmap\":\n        url = 'http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n        self.add_tile_layer(url, name=basemap, **kwargs)\n    elif basemap.lower() == \"satellite\":\n        url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n        self.add_tile_layer(url, name=basemap, **kwargs)\n    else:\n        try:\n            basemap = eval(f\"xyz.{basemap}\")\n            url = basemap.build_url()\n            attribution = basemap.attribution\n            self.add_tile_layer(url, name=basemap.name, attribution=attribution, **kwargs)\n        except:\n            raise ValueError(f\"Basemap '{basemap}' not found.\")\n</code></pre>"},{"location":"rasterarea/#rasterarea.rasterarea.Map.add_raster","title":"<code>add_raster(self, source, bands=1, layer_name=None, palette=None, vmin=None, vmax=None, nodata=None, attribute=None)</code>","text":"<p>Add a local raster dataset to the map.</p> <pre><code>If you are using this function in JupyterHub on a remote server and the raster does not render properly, try\nrunning the following two lines before calling this function:\n\nimport os\nos.environ['LOCALTILESERVER_CLIENT_PREFIX'] = 'proxy/{port}'\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> <p>The path to the GeoTIFF file or the URL of the Cloud Optimized GeoTIFF.</p> required <code>band</code> <code>int</code> <p>The band to use. Band indexing starts at 1. Defaults to None.</p> required <code>palette</code> <code>str</code> <p>The name of the color palette from <code>palettable</code> to use when plotting a single band. See https://jiffyclub.github.io/palettable. Default is greyscale</p> <code>None</code> <code>vmin</code> <code>float</code> <p>The minimum value to use when colormapping the palette when plotting a single band. Defaults to None.</p> <code>None</code> <code>vmax</code> <code>float</code> <p>The maximum value to use when colormapping the palette when plotting a single band. Defaults to None.</p> <code>None</code> <code>nodata</code> <code>float</code> <p>The value from the band to use to interpret as not valid data. Defaults to None.</p> <code>None</code> <code>attribution</code> <code>str</code> <p>Attribution for the source raster. This defaults to a message about it being a local file.. Defaults to None.</p> required <code>layer_name</code> <code>str</code> <p>The layer name to use. Defaults to None.</p> <code>None</code> Source code in <code>rasterarea/rasterarea.py</code> <pre><code>def add_raster(\n    self,\n    source,\n    bands=1,\n    layer_name=None,\n    palette=None,\n    vmin=None,\n    vmax=None,\n    nodata=None,\n    attribute=None\n):\n\"\"\"Add a local raster dataset to the map.\n\n        If you are using this function in JupyterHub on a remote server and the raster does not render properly, try\n        running the following two lines before calling this function:\n\n        import os\n        os.environ['LOCALTILESERVER_CLIENT_PREFIX'] = 'proxy/{port}'\n\n    Args:\n        source (str): The path to the GeoTIFF file or the URL of the Cloud Optimized GeoTIFF.\n        band (int, optional): The band to use. Band indexing starts at 1. Defaults to None.\n        palette (str, optional): The name of the color palette from `palettable` to use when plotting a single band. See https://jiffyclub.github.io/palettable. Default is greyscale\n        vmin (float, optional): The minimum value to use when colormapping the palette when plotting a single band. Defaults to None.\n        vmax (float, optional): The maximum value to use when colormapping the palette when plotting a single band. Defaults to None.\n        nodata (float, optional): The value from the band to use to interpret as not valid data. Defaults to None.\n        attribution (str, optional): Attribution for the source raster. This defaults to a message about it being a local file.. Defaults to None.\n        layer_name (str, optional): The layer name to use. Defaults to None.\n    \"\"\"\n    super().add_raster(source=source, bands=bands, layer_name=layer_name, palette=palette, vmin=vmin, vmax=vmax, nodata=nodata, attribute=attribute)\n</code></pre>"},{"location":"rasterarea/#rasterarea.rasterarea.Map.add_toolbar","title":"<code>add_toolbar(self, position='topright', **kwargs)</code>","text":"<p>Adds a toolbar to the map.</p> <p>Parameters:</p> Name Type Description Default <code>toolbar</code> <code>str</code> <p>The toolbar to add. Defaults to 'draw'.</p> required <code>position</code> <code>str</code> <p>The position of the toolbar. Defaults to 'topright'.</p> <code>'topright'</code> Source code in <code>rasterarea/rasterarea.py</code> <pre><code>def add_toolbar(self, position='topright', **kwargs):\n\"\"\"Adds a toolbar to the map.\n\n    Args:\n        toolbar (str, optional): The toolbar to add. Defaults to 'draw'.\n        position (str, optional): The position of the toolbar. Defaults to 'topright'.\n    \"\"\"\n    widget_width = \"250px\"\n    padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n    toolbar_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Toolbar\",\n        icon=\"wrench\",\n        layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n    )\n\n    close_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Close the tool\",\n        icon=\"times\",\n        button_style=\"primary\",\n        layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n    )\n    toolbar = widgets.HBox([toolbar_button])\n\n    def toolbar_click(change):\n        if change[\"new\"]:\n            toolbar.children = [toolbar_button, close_button]\n        else:\n            toolbar.children = [toolbar_button]\n\n    toolbar_button.observe(toolbar_click, \"value\")\n\n    def close_click(change):\n        if change[\"new\"]:\n            toolbar_button.close()\n            close_button.close()\n            toolbar.close()\n\n    close_button.observe(close_click, \"value\")\n    rows = 2\n    cols = 2\n    grid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\"))\n    icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\n    for i in range(rows):\n        for j in range(cols):\n            grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j], \n                                        layout=widgets.Layout(width=\"28px\", padding=\"0px\"))\n    toolbar = widgets.VBox([toolbar_button])\n    def toolbar_click(change):\n        if change[\"new\"]:\n            toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n        else:\n            toolbar.children = [toolbar_button]\n\n    toolbar_button.observe(toolbar_click, \"value\")\n\n    toolbar_ctrl = WidgetControl(widget=toolbar, position=position)\n\n    output = widgets.Output()\n    output_ctrl = WidgetControl(widget=output, position=\"bottomright\")\n    def tool_click(b):    \n        with output:\n            output.clear_output()\n            print(f\"You clicked the {b.icon} button\")\n\n    for i in range(rows):\n        for j in range(cols):\n            tool = grid[i, j]\n            tool.on_click(tool_click)\n\n    with output:\n        output.clear_output()\n        print(\"Click on a button to see the output\")\n\n    basemap = widgets.Dropdown(\n        options=[\"roadmap\", \"satellite\"],\n        value=None,\n        description=\"Basemap:\",\n        style={\"description_width\": \"initial\"},\n        layout=widgets.Layout(width=\"200px\"),\n    )\n    basemap_ctrl = WidgetControl(widget=basemap, position=\"topright\")\n\n    def tool_click(b):    \n        with output:\n            output.clear_output()\n            print(f\"You clicked the {b.icon} button\")\n\n            if b.icon == \"map\":\n                self.add_control(basemap_ctrl)\n            if b.icon == \"folder-open\":\n                self.toolbar.setup_interactive_plot()\n\n    for i in range(rows):\n        for j in range(cols):\n            tool = grid[i, j]\n            tool.on_click(tool_click)\n\n    def change_basemap(change):\n        if change[\"new\"]:\n            self.add_basemap(basemap.value)\n\n    basemap.observe(change_basemap, names='value')\n    self.add_control(toolbar_ctrl)\n</code></pre>"},{"location":"rasterarea/#rasterarea.rasterarea.SelectFilesButton","title":"<code> SelectFilesButton            (Button)         </code>","text":"<p>A file widget that leverages tkinter.filedialog.</p> Source code in <code>rasterarea/rasterarea.py</code> <pre><code>class SelectFilesButton(widgets.Button):\n\"\"\"A file widget that leverages tkinter.filedialog.\"\"\"\n\n    def __init__(self):\n        super(SelectFilesButton, self).__init__()\n        # Add the selected_files trait\n        self.add_traits(files=traitlets.traitlets.List())\n        # Create the button.\n        self.description = \"Select Files\"\n        self.icon = \"square-o\"\n        # Set on click behavior.\n        self.on_click(self.select_files)\n\n    @staticmethod\n    def select_files(b):\n\"\"\"Generate instance of tkinter.filedialog.\n\n        Parameters\n        ----------\n        b : obj:\n            An instance of ipywidgets.widgets.Button \n        \"\"\"\n        # Create Tk root\n        root = Tk()\n        # Hide the main window\n        root.withdraw()\n        # Raise the root to the top of all windows.\n        root.call('wm', 'attributes', '.', '-topmost', True)\n        # List of selected fileswill be set to b.value\n        b.files = filedialog.askopenfilename(multiple=True)\n\n        b.description = \"Files Selected\"\n        b.icon = \"check-square-o\"\n        b.style.button_color = \"lightgreen\"\n</code></pre>"},{"location":"rasterarea/#rasterarea.rasterarea.SelectFilesButton.select_files","title":"<code>select_files(b)</code>  <code>staticmethod</code>","text":"<p>Generate instance of tkinter.filedialog.</p>"},{"location":"rasterarea/#rasterarea.rasterarea.SelectFilesButton.select_files--parameters","title":"Parameters","text":"<p>b : obj:     An instance of ipywidgets.widgets.Button </p> Source code in <code>rasterarea/rasterarea.py</code> <pre><code>@staticmethod\ndef select_files(b):\n\"\"\"Generate instance of tkinter.filedialog.\n\n    Parameters\n    ----------\n    b : obj:\n        An instance of ipywidgets.widgets.Button \n    \"\"\"\n    # Create Tk root\n    root = Tk()\n    # Hide the main window\n    root.withdraw()\n    # Raise the root to the top of all windows.\n    root.call('wm', 'attributes', '.', '-topmost', True)\n    # List of selected fileswill be set to b.value\n    b.files = filedialog.askopenfilename(multiple=True)\n\n    b.description = \"Files Selected\"\n    b.icon = \"check-square-o\"\n    b.style.button_color = \"lightgreen\"\n</code></pre>"},{"location":"rasterarea/#rasterarea.rasterarea.Toolbar","title":"<code> Toolbar            (VBox)         </code>","text":"<p>create a widget for interactive plot</p> Source code in <code>rasterarea/rasterarea.py</code> <pre><code>class Toolbar(widgets.VBox):\n\"\"\"\n    create a widget for interactive plot\n\n    \"\"\"    \n    def __init__(self,parent,**kwargs):\n        super().__init__()\n        self.create_widgets()\n        self.output = widgets.Output()\n        self.setup_interactive_plot()   \n        self.parent = parent\n\n        # Observe the changes in the fileuploader.files and call open_file\n        self.fileuploader.observe(self.open_file, names='files')\n        self.layerselector.observe(self.plot, 'value')  \n\n    padding = \"0px 0px 0px 5px\"\n    ## create buttons\n    def create_widgets(self):\n        self.fileuploader = SelectFilesButton()\n        self.add_button = widgets.Button(description=\"Add\")\n        self.add_button.on_click(self.add)\n        self.layerselector = widgets.Dropdown(\n            options=[\"No file uploaded\"],\n            value=None,\n            description=\"Layer:\"\n        )\n        self.pick_button = widgets.Button(description=\"Pick\", layout=widgets.Layout(padding=\"0px 0px 0px 5px\"))  # Create a pick_button\n        self.pick_button.on_click(self.pick_location)  # Add an event listener for the pick_button\n        self.plot_button = widgets.Button(description=\"Plot\", layout=widgets.Layout(padding=\"0px 0px 0px 5px\"))  # Create a plot_button\n        self.plot_button.on_click(self.plot_time_series)  # Add an event listener for the plot_button\n        self.marker = None\n        self.start_date_picker = widgets.DatePicker(description='Start Date', value=datetime(2018, 1, 1))\n        self.end_date_picker = widgets.DatePicker(description='End Date', value=datetime(2018, 12, 31))\n        self.time_resolution_dropdown = widgets.Dropdown(options=['Daily', 'Monthly', 'Yearly'], description='Resolution')\n        self.save_button = widgets.Button(description=\"Save\", layout=widgets.Layout(padding=\"0px 0px 0px 5px\"))  # Create a save_button\n        self.save_button.on_click(self.save_plot)  \n        self.children = [self.fileuploader,\n                        self.pick_button,\n                        self.plot_button,\n                        self.start_date_picker,\n                        self.end_date_picker,\n                        self.time_resolution_dropdown,\n                        self.save_button]  # Add the plot_button to the children list\n        self.fig = None \n\n    ## define toolbar layout\n    def setup_interactive_plot(self):\n        left_box = widgets.VBox([\n            self.fileuploader,\n            self.layerselector,\n            self.add_button,\n            self.pick_button,\n            self.start_date_picker,\n            self.end_date_picker,\n            self.time_resolution_dropdown,\n            self.plot_button,\n            self.save_button\n        ])\n\n        toolbar = widgets.HBox([left_box, self.output])\n        display(toolbar)\n    ## define open file event\n    def open_file(self, change):\n        self.ds_list = self.fileuploader.files\n        self.update_dropdown()\n\n    def update_dropdown(self):\n        if len(self.ds_list) &gt; 0:\n            file_names = [os.path.basename(file_path) for file_path in self.ds_list]\n            self.layerselector.options = file_names\n            self.layerselector.value = file_names[0]\n        else:\n            self.layerselector.options = [\"No file uploaded\"]\n            self.layerselector.value = None\n\n    def read_and_plot_file(self, file_path):\n        with self.output:\n            self.output.clear_output()\n            if file_path.endswith(\".tif\"):\n                self.parent.add_raster(source=file_path, bands=1, layer_name='GRACE', palette='Accent', vmin=None, vmax=None, nodata=-99999, attribute=None)\n                with rasterio.open(file_path) as ds:\n                    data = ds.read(1)\n            else:\n                print(\"File type not supported\")\n                return\n\n            nodata = -99999\n            data[data == nodata] = np.nan # Set nodata values to NaN\n\n        # Setting up the color scale\n            cmap = plt.cm.RdBu\n            cmap.set_bad(color='white')\n            norm = TwoSlopeNorm(vmin=-1, vcenter=0, vmax=1)\n\n            plt.imshow(data, cmap=cmap, norm=norm) # Plot the image with the new color scale\n            plt.colorbar()\n            plt.show()\n            print(self.output.outputs)\n\n    def plot(self, change):\n        if change['name'] == 'value':\n            selected_file_name = self.layerselector.value\n            selected_file_index = self.layerselector.options.index(selected_file_name)\n            selected_file_path = self.fileuploader.files[selected_file_index]\n            self.read_and_plot_file(selected_file_path)\n\n    def add(self, event=None):\n        self.read_and_plot_file(file_path = self.fileuploader.files[0])\n\n    def pick_location(self, button):\n        if not self.parent.on_interaction(self.handle_click):  # Add a click event handler to the parent (Map)\n            self.parent.on_interaction(self.handle_click)\n\n    def handle_click(self, **kwargs):\n        if kwargs.get('type') == 'click':  # Check if the event is a click event\n            lat_lng = kwargs.get('coordinates')\n            if lat_lng:\n                if self.marker:  # If a marker already exists, remove it before adding a new one\n                    self.parent.remove_layer(self.marker)\n\n                self.marker = Marker(location=lat_lng, draggable=False)  # Create a marker at the clicked location\n                self.parent.add_layer(self.marker)  # Add the marker to the map\n                print(f'Clicked coordinates: {lat_lng}')  # Print the real-world coordinates\n\n    @staticmethod\n    def date_from_filename(filename):\n        parts = filename.split('_')\n        for part in parts:\n            if part.isdigit():\n                start_day_of_year = int(part[:7])\n                end_day_of_year = int(part[7:])\n                break\n        else:\n            raise ValueError(\"Date not found in file name\")\n\n        year = int(start_day_of_year / 1000)\n        start_day_of_year %= 1000\n        end_date = datetime(year, 1, 1) + timedelta(days=end_day_of_year - 1)\n        return end_date\n\n    def get_tiff_dates(self, file_list):\n        dates = []\n        for file_path in file_list:\n            file_name = os.path.basename(file_path)\n            date_obj = self.date_from_filename(file_name)\n            dates.append(date_obj)\n        return dates\n\n    def get_pixel_values(self, file_list, lat_lng):\n        lat, lng = lat_lng\n        values = []\n        for file_path in file_list:\n            with rasterio.open(file_path) as src:\n                row, col = src.index(lng, lat)\n                value = src.read(1)[row, col]\n                values.append(value)\n        return values\n\n    def check_number_of_files(self, start_date, end_date, time_resolution):\n        if time_resolution == 'Daily':\n            expected_files = (end_date - start_date).days + 1\n        elif time_resolution == 'Monthly':\n            expected_files = (end_date.year - start_date.year) * 12 + end_date.month - start_date.month + 1\n        elif time_resolution == 'Yearly':\n            expected_files = end_date.year - start_date.year + 1\n\n        if len(self.fileuploader.files) != expected_files:\n            return f\"Error: {expected_files} files expected for the selected date range and time resolution, but {len(self.fileuploader.files)} files were uploaded.\"\n        return \"\"\n\n    def plot_time_series(self, button):\n        if not hasattr(self, 'marker') or self.marker is None:\n            return\n\n        lat_lng = self.marker.location\n        values = self.get_pixel_values(self.fileuploader.files, lat_lng)\n\n        start_date = self.start_date_picker.value\n        end_date = self.end_date_picker.value\n        time_resolution = self.time_resolution_dropdown.value\n\n        error_message = self.check_number_of_files(start_date, end_date, time_resolution)\n        if error_message:\n            print(error_message)\n            return\n\n        if time_resolution == 'Daily':\n            date_range = pd.date_range(start_date, end_date, freq='D')\n            x_axis_format = mdates.DayLocator()\n            x_axis_date_format = mdates.DateFormatter('%Y-%m-%d')\n        elif time_resolution == 'Monthly':\n            date_range = pd.date_range(start_date, end_date, freq='M')\n            x_axis_format = mdates.MonthLocator()\n            x_axis_date_format = mdates.DateFormatter('%Y-%m')\n        elif time_resolution == 'Yearly':\n            date_range = pd.date_range(start_date, end_date, freq='Y')\n            x_axis_format = mdates.YearLocator()\n            x_axis_date_format = mdates.DateFormatter('%Y')\n\n                # Resample the values to match the length of the date_range\n        values = np.interp(\n            np.linspace(0, len(values) - 1, len(date_range)),\n            np.arange(len(values)),\n            values\n        )\n        with self.output:\n            self.output.clear_output() \n            self.fig, ax = plt.subplots()\n            ax.plot(date_range, values)\n            ax.xaxis.set_major_locator(x_axis_format)\n            ax.xaxis.set_major_formatter(x_axis_date_format)\n            plt.xticks(rotation=45)\n            plt.show()\n\n    def save_plot(self, button):\n        with self.output:\n            if self.fig:  # Check if there is a figure to save\n                self.fig.savefig('plot.png')  # Save the figure to a file named 'plot.png'\n                print('Plot saved as plot.png')  # Print a message to indicate the plot has been saved\n            else:\n                print('No plot to save')  # Print a message if there is no plot to save\n</code></pre>"},{"location":"rasterarea/#rasterarea.rasterarea.area_of_pixel","title":"<code>area_of_pixel(center_lat, pixel_size=1, coordinatesp='WGS84', **kwargs)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>center_lat</code> <code>_type_</code> <p>description</p> required <code>pixel_size</code> <code>int</code> <p>description. Defaults to 1.</p> <code>1</code> <code>coordinatesp</code> <code>str</code> <p>description. Defaults to 'WGS84'.</p> <code>'WGS84'</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>description</p> <p>Returns:</p> Type Description <code>_type_</code> <p>description</p> Source code in <code>rasterarea/rasterarea.py</code> <pre><code>def area_of_pixel(center_lat,pixel_size=1, coordinatesp = 'WGS84', **kwargs):\n\"\"\"_summary_\n\n    Args:\n        center_lat (_type_): _description_\n        pixel_size (int, optional): _description_. Defaults to 1.\n        coordinatesp (str, optional): _description_. Defaults to 'WGS84'.\n\n    Raises:\n        ValueError: _description_\n\n    Returns:\n        _type_: _description_\n    \"\"\" \n    if coordinatesp== 'WGS84':\n        a = 6378137\n        b = 6356752.3142\n    elif coordinatesp== 'WGS72':\n        a = 6378135\n        b = 6356750.5\n    elif coordinatesp== 'WGS66':\n        a = 6378145\n        b = 6356759.769356\n    elif coordinatesp== 'WGS60':\n        a = 6378165\n        b = 6356783.286959\n    elif coordinatesp== 'IERS':\n        a = 6378136.6\n        b = 6356751.9\n    elif coordinatesp== 'GRS80':\n        a = 6378137\n        b = 6356752.3141\n    elif coordinatesp== 'GRS67':\n        a = 6378160\n        b = 6356774.51609\n    elif coordinatesp== 'Krassovsky':\n        a = 6378245\n        b = 6356863.019\n    else:\n        raise ValueError(f\"Invalid coordinatesp name: {coordinatesp}\")\n\n    c = math.sqrt(1 - (b/a)**2)\n    zm_a = 1 - c*math.sin(math.radians(center_lat+pixel_size/2))\n    zp_a = 1 + c*math.sin(math.radians(center_lat+pixel_size/2))\n    area_a = math.pi * b**2 * (math.log(zp_a/zm_a) / (2*c) + math.sin(math.radians(center_lat+pixel_size/2)) / (zp_a*zm_a))\n    zm_b = 1 - c*math.sin(math.radians(center_lat-pixel_size/2))\n    zp_b = 1 + c*math.sin(math.radians(center_lat-pixel_size/2))\n    area_b = math.pi * b**2 * (math.log(zp_b/zm_b) / (2*c) + math.sin(math.radians(center_lat-pixel_size/2)) / (zp_b*zm_b))\n    area = (1 / 360 * (area_a - area_b))\n    return area\n</code></pre>"},{"location":"rasterarea/#rasterarea.rasterarea.get_geotiff_array","title":"<code>get_geotiff_array(geotiff_path, band=1, **kwargs)</code>","text":"<p>Get a NumPy array from a GeoTIFF file.</p> <p>Parameters:</p> Name Type Description Default <code>geotiff_path</code> <code>str</code> <p>The path to the GeoTIFF file.</p> required <code>band</code> <code>int</code> <p>The band to read. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Type Description <code>numpy.ndarray</code> <p>A NumPy array containing the data from the GeoTIFF file.</p> Source code in <code>rasterarea/rasterarea.py</code> <pre><code>def get_geotiff_array(geotiff_path, band=1, **kwargs):\n\"\"\"Get a NumPy array from a GeoTIFF file.\n\n    Args:\n        geotiff_path (str): The path to the GeoTIFF file.\n        band (int, optional): The band to read. Defaults to 1.\n\n    Returns:\n        numpy.ndarray: A NumPy array containing the data from the GeoTIFF file.\n    \"\"\"\n    import rasterio\n\n    with rasterio.open(geotiff_path) as src:\n        array = src.read(band)\n\n    return array\n</code></pre>"},{"location":"rasterarea/#rasterarea.rasterarea.get_geotiff_bounds","title":"<code>get_geotiff_bounds(geotiff_path, **kwargs)</code>","text":"<p>Get the bounds of a GeoTIFF file.</p> <p>Parameters:</p> Name Type Description Default <code>geotiff_path</code> <code>str</code> <p>The path to the GeoTIFF file.</p> required <p>Returns:</p> Type Description <code>tuple</code> <p>A tuple containing the bounds of the GeoTIFF file.</p> Source code in <code>rasterarea/rasterarea.py</code> <pre><code>def get_geotiff_bounds(geotiff_path, **kwargs):\n\"\"\"Get the bounds of a GeoTIFF file.\n\n    Args:\n        geotiff_path (str): The path to the GeoTIFF file.\n\n    Returns:\n        tuple: A tuple containing the bounds of the GeoTIFF file.\n    \"\"\"\n    import rasterio\n\n    with rasterio.open(geotiff_path) as src:\n        bounds = src.bounds\n\n    return bounds\n</code></pre>"},{"location":"rasterarea/#rasterarea.rasterarea.get_geotiff_crs","title":"<code>get_geotiff_crs(geotiff_path, **kwargs)</code>","text":"<p>Get the CRS of a GeoTIFF file.</p> <p>Parameters:</p> Name Type Description Default <code>geotiff_path</code> <code>str</code> <p>The path to the GeoTIFF file.</p> required <p>Returns:</p> Type Description <code>rasterio.crs.CRS</code> <p>A CRS object containing the CRS of the GeoTIFF file.</p> Source code in <code>rasterarea/rasterarea.py</code> <pre><code>def get_geotiff_crs(geotiff_path, **kwargs):\n\"\"\"Get the CRS of a GeoTIFF file.\n\n    Args:\n        geotiff_path (str): The path to the GeoTIFF file.\n\n    Returns:\n        rasterio.crs.CRS: A CRS object containing the CRS of the GeoTIFF file.\n    \"\"\"\n    import rasterio\n\n    with rasterio.open(geotiff_path) as src:\n        crs = src.crs\n\n    return crs\n</code></pre>"},{"location":"rasterarea/#rasterarea.rasterarea.get_geotiff_info","title":"<code>get_geotiff_info(geotiff_path, **kwargs)</code>","text":"<p>Get information about a GeoTIFF file.</p> <p>Parameters:</p> Name Type Description Default <code>geotiff_path</code> <code>str</code> <p>The path to the GeoTIFF file.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary containing information about the GeoTIFF file.</p> Source code in <code>rasterarea/rasterarea.py</code> <pre><code>def get_geotiff_info(geotiff_path, **kwargs):\n\"\"\"Get information about a GeoTIFF file.\n\n    Args:\n        geotiff_path (str): The path to the GeoTIFF file.\n\n    Returns:\n        dict: A dictionary containing information about the GeoTIFF file.\n    \"\"\"\n    import rasterio\n\n    with rasterio.open(geotiff_path) as src:\n        info = {\n            \"crs\": src.crs,\n            \"count\": src.count,\n            \"driver\": src.driver,\n            \"dtype\": src.dtypes[0],\n            \"height\": src.height,\n            \"indexes\": src.indexes,\n            \"nodata\": src.nodata,\n            \"shape\": src.shape,\n            \"transform\": src.transform,\n            \"width\": src.width,\n        }\n\n    return info\n</code></pre>"},{"location":"rasterarea/#rasterarea.rasterarea.get_geotiff_nodata","title":"<code>get_geotiff_nodata(geotiff_path, **kwargs)</code>","text":"<p>Get the nodata value of a GeoTIFF file.</p> <p>Parameters:</p> Name Type Description Default <code>geotiff_path</code> <code>str</code> <p>The path to the GeoTIFF file.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The nodata value of the GeoTIFF file.</p> Source code in <code>rasterarea/rasterarea.py</code> <pre><code>def get_geotiff_nodata(geotiff_path, **kwargs):\n\"\"\"Get the nodata value of a GeoTIFF file.\n\n    Args:\n        geotiff_path (str): The path to the GeoTIFF file.\n\n    Returns:\n        float: The nodata value of the GeoTIFF file.\n    \"\"\"\n    import rasterio\n\n    with rasterio.open(geotiff_path) as src:\n        nodata = src.nodata\n\n    return nodata\n</code></pre>"},{"location":"rasterarea/#rasterarea.rasterarea.get_geotiff_resolution","title":"<code>get_geotiff_resolution(geotiff_path, **kwargs)</code>","text":"<p>Get the resolution of a GeoTIFF file.</p> <p>Parameters:</p> Name Type Description Default <code>geotiff_path</code> <code>str</code> <p>The path to the GeoTIFF file.</p> required <p>Returns:</p> Type Description <code>tuple</code> <p>A tuple containing the resolution of the GeoTIFF file.</p> Source code in <code>rasterarea/rasterarea.py</code> <pre><code>def get_geotiff_resolution(geotiff_path, **kwargs):\n\"\"\"Get the resolution of a GeoTIFF file.\n\n    Args:\n        geotiff_path (str): The path to the GeoTIFF file.\n\n    Returns:\n        tuple: A tuple containing the resolution of the GeoTIFF file.\n    \"\"\"\n    import rasterio\n\n    with rasterio.open(geotiff_path) as src:\n        resolution = (src.res[0], src.res[1])\n\n    return resolution\n</code></pre>"},{"location":"rasterarea/#rasterarea.rasterarea.get_geotiff_shape","title":"<code>get_geotiff_shape(geotiff_path, **kwargs)</code>","text":"<p>Get the shape of a GeoTIFF file.</p> <p>Parameters:</p> Name Type Description Default <code>geotiff_path</code> <code>str</code> <p>The path to the GeoTIFF file.</p> required <p>Returns:</p> Type Description <code>tuple</code> <p>A tuple containing the shape of the GeoTIFF file.</p> Source code in <code>rasterarea/rasterarea.py</code> <pre><code>def get_geotiff_shape(geotiff_path, **kwargs):\n\"\"\"Get the shape of a GeoTIFF file.\n\n    Args:\n        geotiff_path (str): The path to the GeoTIFF file.\n\n    Returns:\n        tuple: A tuple containing the shape of the GeoTIFF file.\n    \"\"\"\n    import rasterio\n\n    with rasterio.open(geotiff_path) as src:\n        shape = src.shape\n\n    return shape\n</code></pre>"},{"location":"rasterarea/#rasterarea.rasterarea.get_geotiff_transform","title":"<code>get_geotiff_transform(geotiff_path, **kwargs)</code>","text":"<p>Get the transform of a GeoTIFF file.</p> <p>Parameters:</p> Name Type Description Default <code>geotiff_path</code> <code>str</code> <p>The path to the GeoTIFF file.</p> required <p>Returns:</p> Type Description <code>Affine</code> <p>An Affine object containing the transform of the GeoTIFF file.</p> Source code in <code>rasterarea/rasterarea.py</code> <pre><code>def get_geotiff_transform(geotiff_path, **kwargs):\n\"\"\"Get the transform of a GeoTIFF file.\n\n    Args:\n        geotiff_path (str): The path to the GeoTIFF file.\n\n    Returns:\n        Affine: An Affine object containing the transform of the GeoTIFF file.\n    \"\"\"\n    import rasterio\n\n    with rasterio.open(geotiff_path) as src:\n        transform = src.transform\n\n    return transform\n</code></pre>"},{"location":"rasterarea/#rasterarea.rasterarea.pixel_area_array","title":"<code>pixel_area_array(point_cloud_arrary, pixel_size=1, coordinatesp='WGS84', toTable=False, **kwargs)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>_type_</code> <p>description</p> required <code>no_data</code> <code>int</code> <p>description. Defaults to 0.</p> required <code>band</code> <code>int</code> <p>description. Defaults to 1.</p> required <p>Returns:</p> Type Description <code>_type_</code> <p>description</p> Source code in <code>rasterarea/rasterarea.py</code> <pre><code>def pixel_area_array(point_cloud_arrary, pixel_size=1, coordinatesp = 'WGS84', toTable = False, **kwargs):\n\"\"\"_summary_\n\n    Args:\n        filepath (_type_): _description_\n        no_data (int, optional): _description_. Defaults to 0.\n        band (int, optional): _description_. Defaults to 1.\n\n    Returns:\n        _type_: _description_\n    \"\"\"\n\n\"\"\"_summary_\n\n    Args:\n        center_lat (_type_): _description_\n        pixel_size (int, optional): _description_. Defaults to 1.\n        coordinatesp (str, optional): _description_. Defaults to 'WGS84'.\n\n    Raises:\n        ValueError: _description_\n\n    Returns:\n        _type_: _description_\n    \"\"\" \n    if coordinatesp== 'WGS84':\n        a = 6378137\n        b = 6356752.3142\n    elif coordinatesp== 'WGS72':\n        a = 6378135\n        b = 6356750.5\n    elif coordinatesp== 'WGS66':\n        a = 6378145\n        b = 6356759.769356\n    elif coordinatesp== 'WGS60':\n        a = 6378165\n        b = 6356783.286959\n    elif coordinatesp== 'IERS':\n        a = 6378136.6\n        b = 6356751.9\n    elif coordinatesp== 'GRS80':\n        a = 6378137\n        b = 6356752.3141\n    elif coordinatesp== 'GRS67':\n        a = 6378160\n        b = 6356774.51609\n    elif coordinatesp== 'Krassovsky':\n        a = 6378245\n        b = 6356863.019\n    else:\n        raise ValueError(f\"Invalid coordinatesp name: {coordinatesp}\")\n    raster_area = point_cloud_arrary\n    for i in range(len(point_cloud_arrary)):\n        center_lat = point_cloud_arrary[i][1]\n        c = math.sqrt(1 - (b/a)**2)\n        zm_a = 1 - c*math.sin(math.radians(center_lat+pixel_size/2))\n        zp_a = 1 + c*math.sin(math.radians(center_lat+pixel_size/2))\n        area_a = math.pi * b**2 * (math.log(zp_a/zm_a) / (2*c) + math.sin(math.radians(center_lat+pixel_size/2)) / (zp_a*zm_a))\n        zm_b = 1 - c*math.sin(math.radians(center_lat-pixel_size/2))\n        zp_b = 1 + c*math.sin(math.radians(center_lat-pixel_size/2))\n        area_b = math.pi * b**2 * (math.log(zp_b/zm_b) / (2*c) + math.sin(math.radians(center_lat-pixel_size/2)) / (zp_b*zm_b))\n        area = (1 / 360 * (area_a - area_b))\n        raster_area[i][2] = area\n\n    if toTable == True:\n        raster_area = pd.DataFrame(raster_area)\n        raster_area.rename(columns={0:'center_lon',1:'center_lat',2:'pixel_area'},inplace=True)\n    else:\n        pass\n\n    return raster_area\n</code></pre>"},{"location":"rasterarea/#rasterarea.rasterarea.point_cloud_arrary","title":"<code>point_cloud_arrary(filepath, no_data=-99999, band=1, **kwargs)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>_type_</code> <p>description</p> required <code>no_data</code> <code>int</code> <p>description. Defaults to 0.</p> <code>-99999</code> <code>band</code> <code>int</code> <p>description. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Type Description <code>_type_</code> <p>description</p> Source code in <code>rasterarea/rasterarea.py</code> <pre><code>def point_cloud_arrary(filepath, no_data=-99999, band=1, **kwargs):\n\"\"\"_summary_\n\n    Args:\n        filepath (_type_): _description_\n        no_data (int, optional): _description_. Defaults to 0.\n        band (int, optional): _description_. Defaults to 1.\n\n    Returns:\n        _type_: _description_\n    \"\"\"\n    import lidario as lio\n    translator = lio.Translator(\"geotiff\", \"np\")\n    point_cloud = translator.translate(input_values=filepath, no_data=no_data, band=band)\n    return point_cloud\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use rasterarea in a project:</p> <pre><code>import rasterarea\n</code></pre>"},{"location":"examples/fileupload_test/","title":"Fileupload test","text":"In\u00a0[1]: Copied! <pre>## the visuallization of the tiff file used the add_layer function from geemap\n## be sure to install localtileserver package to your environment\n## conda install -c conda-forge gdal\n## conda install -c conda-forge localtileserver\n# import the package\nimport localtileserver\nimport rasterarea\n</pre> ## the visuallization of the tiff file used the add_layer function from geemap ## be sure to install localtileserver package to your environment ## conda install -c conda-forge gdal ## conda install -c conda-forge localtileserver # import the package import localtileserver import rasterarea <pre>\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\nCell In[1], line 6\n      1 ## the visuallization of the tiff file used the add_layer function from geemap\n      2 ## be sure to install localtileserver package to your environment\n      3 ## conda install -c conda-forge gdal\n      4 ## conda install -c conda-forge localtileserver\n      5 # import the package\n----&gt; 6 import localtileserver\n      7 import rasterarea\n\nModuleNotFoundError: No module named 'localtileserver'</pre> In\u00a0[2]: Copied! <pre># call and display the interactive map\nm = rasterarea.Map()\nm\n</pre> # call and display the interactive map m = rasterarea.Map() m <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[2], line 2\n      1 # call and display the interactive map\n----&gt; 2 m = rasterarea.Map()\n      3 m\n\nNameError: name 'rasterarea' is not defined</pre> In\u00a0[3]: Copied! <pre># select files you want to upload\n# select the layer you want to visuallize in interactive map, default to the first file you uploaded\n# pick a point on the interactive map\n# click plot to create a time series plot of the pixel value that the point within\n# click save button to save the plot\n</pre> # select files you want to upload # select the layer you want to visuallize in interactive map, default to the first file you uploaded # pick a point on the interactive map # click plot to create a time series plot of the pixel value that the point within # click save button to save the plot In\u00a0[4]: Copied! <pre>## get the pixel area arrary of the data\nfile_path = './data/grace_tif/GRD-3_2018152-2018181_GRFO_UTCSR_BA01_0600_LND_v04.tif'\n\npoint_arrary = rasterarea.point_cloud_arrary(file_path) # get the point arrary of the raster\npixel_area = rasterarea.pixel_area_array(point_arrary)\nprint(pixel_area)\n</pre> ## get the pixel area arrary of the data file_path = './data/grace_tif/GRD-3_2018152-2018181_GRFO_UTCSR_BA01_0600_LND_v04.tif'  point_arrary = rasterarea.point_cloud_arrary(file_path) # get the point arrary of the raster pixel_area = rasterarea.pixel_area_array(point_arrary) print(pixel_area)  <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[4], line 4\n      1 ## get the pixel area arrary of the data\n      2 file_path = './data/grace_tif/GRD-3_2018152-2018181_GRFO_UTCSR_BA01_0600_LND_v04.tif'\n----&gt; 4 point_arrary = rasterarea.point_cloud_arrary(file_path) # get the point arrary of the raster\n      5 pixel_area = rasterarea.pixel_area_array(point_arrary)\n      6 print(pixel_area)\n\nNameError: name 'rasterarea' is not defined</pre>"},{"location":"examples/final_notebook/","title":"Final notebook","text":"In\u00a0[1]: Copied! <pre>from rasterarea import ipyleafletmap\n</pre> from rasterarea import ipyleafletmap In\u00a0[2]: Copied! <pre>m = ipyleafletmap.Map()\nm\n</pre> m = ipyleafletmap.Map() m Out[2]: In\u00a0[3]: Copied! <pre>csv_path = './data/world_cities.csv'\nm.add_toolbar()\n</pre> csv_path = './data/world_cities.csv' m.add_toolbar()"},{"location":"examples/final_project/","title":"Final project","text":"In\u00a0[1]: Copied! <pre>from rasterarea import ipyleafletmap\n</pre> from rasterarea import ipyleafletmap In\u00a0[2]: Copied! <pre>m = ipyleafletmap.Map()\nm\n</pre> m = ipyleafletmap.Map() m Out[2]: In\u00a0[3]: Copied! <pre>csv_path = './data/world_cities.csv'\nm.add_toolbar()\n</pre> csv_path = './data/world_cities.csv' m.add_toolbar()"},{"location":"examples/ipywidgets_box/","title":"Ipywidgets box","text":"In\u00a0[1]: Copied! <pre># import geemap\n# Map = geemap.Map()\n# Map\n</pre> # import geemap # Map = geemap.Map() # Map In\u00a0[2]: Copied! <pre>import ipywidgets as widgets\n</pre> import ipywidgets as widgets In\u00a0[3]: Copied! <pre>widget_width = \"250px\"\npadding = \"0px 0px 0px 4px\"  # upper, right, bottom, left\n</pre> widget_width = \"250px\" padding = \"0px 0px 0px 4px\"  # upper, right, bottom, left <p>icon: https://fontawesome.com/v4.7.0/icons/</p> In\u00a0[4]: Copied! <pre>toolbar_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Toolbar\",\n    icon=\"gear\",\n    layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n)\ntoolbar_button\n</pre> toolbar_button = widgets.ToggleButton(     value=False,     tooltip=\"Toolbar\",     icon=\"gear\",     layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding), ) toolbar_button Out[4]: In\u00a0[5]: Copied! <pre># toolbar_button.layout.width = \"28px\"\n</pre> # toolbar_button.layout.width = \"28px\" In\u00a0[6]: Copied! <pre>toolbar_button.value\n</pre> toolbar_button.value Out[6]: <pre>False</pre> In\u00a0[7]: Copied! <pre>close_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Close the tool\",\n    icon=\"times\",\n    button_style=\"primary\",\n    layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n)\nclose_button\n</pre> close_button = widgets.ToggleButton(     value=False,     tooltip=\"Close the tool\",     icon=\"times\",     button_style=\"primary\",     layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding), ) close_button Out[7]: In\u00a0[8]: Copied! <pre>import ipyleaflet\n</pre> import ipyleaflet In\u00a0[9]: Copied! <pre>m = ipyleaflet.Map(center=(40, -100), zoom=4)\nm.add_control(box)\nm\n</pre> m = ipyleaflet.Map(center=(40, -100), zoom=4) m.add_control(box) m <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[9], line 2\n      1 m = ipyleaflet.Map(center=(40, -100), zoom=4)\n----&gt; 2 m.add_control(box)\n      3 m\n\nNameError: name 'box' is not defined</pre> In\u00a0[10]: Copied! <pre>widgets.HBox([close_button, toolbar_button])\n</pre> widgets.HBox([close_button, toolbar_button]) Out[10]: In\u00a0[11]: Copied! <pre>box = widgets.HBox()\nbox.children = [close_button, toolbar_button]\nbox\n</pre> box = widgets.HBox() box.children = [close_button, toolbar_button] box Out[11]: In\u00a0[12]: Copied! <pre>checkbox = widgets.Checkbox(\n    description=\"Click me\",\n    indent=False,\n    layout=widgets.Layout(padding=padding, width=widget_width),\n)\ncheckbox\n</pre> checkbox = widgets.Checkbox(     description=\"Click me\",     indent=False,     layout=widgets.Layout(padding=padding, width=widget_width), ) checkbox Out[12]: In\u00a0[13]: Copied! <pre>checkbox.value\n</pre> checkbox.value Out[13]: <pre>False</pre> In\u00a0[14]: Copied! <pre>dropdown = widgets.Dropdown(\n    options=[\"Option 1\", \"Option 2\", \"Option 3\"],\n    value=None,\n    description=\"Dropdown:\",\n    layout=widgets.Layout(width=widget_width, padding=padding),\n    style={\"description_width\": \"initial\"},\n)\ndropdown\n</pre> dropdown = widgets.Dropdown(     options=[\"Option 1\", \"Option 2\", \"Option 3\"],     value=None,     description=\"Dropdown:\",     layout=widgets.Layout(width=widget_width, padding=padding),     style={\"description_width\": \"initial\"}, ) dropdown Out[14]: In\u00a0[15]: Copied! <pre>dropdown.value\n</pre> dropdown.value In\u00a0[16]: Copied! <pre>int_slider = widgets.IntSlider(\n    min=1,\n    max=24,\n    value=4,\n    description=\"zoom level: \",\n    readout=True,\n    continuous_update=False,\n    layout=widgets.Layout(width=widget_width, padding=padding),\n    style={\"description_width\": \"initial\"},\n)\nint_slider\n</pre> int_slider = widgets.IntSlider(     min=1,     max=24,     value=4,     description=\"zoom level: \",     readout=True,     continuous_update=False,     layout=widgets.Layout(width=widget_width, padding=padding),     style={\"description_width\": \"initial\"}, ) int_slider Out[16]: In\u00a0[17]: Copied! <pre>float_slider = widgets.FloatSlider(\n    min=1,\n    max=100,\n    description=\"Float Slider: \",\n    readout=True,\n    continuous_update=True,\n    layout=widgets.Layout(width=widget_width, padding=padding),\n    style={\"description_width\": \"initial\"},\n)\nfloat_slider\n</pre> float_slider = widgets.FloatSlider(     min=1,     max=100,     description=\"Float Slider: \",     readout=True,     continuous_update=True,     layout=widgets.Layout(width=widget_width, padding=padding),     style={\"description_width\": \"initial\"}, ) float_slider Out[17]: In\u00a0[18]: Copied! <pre>color = widgets.ColorPicker(\n    concise=False,\n    description=\"Color Picker: \",\n    value=\"blue\",\n    style={\"description_width\": \"initial\"},\n    layout=widgets.Layout(width=widget_width, padding=padding),\n)\n\ncolor\n</pre> color = widgets.ColorPicker(     concise=False,     description=\"Color Picker: \",     value=\"blue\",     style={\"description_width\": \"initial\"},     layout=widgets.Layout(width=widget_width, padding=padding), )  color Out[18]: In\u00a0[19]: Copied! <pre>color.value\n</pre> color.value Out[19]: <pre>'blue'</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[20]: Copied! <pre>color = widgets.ColorPicker(\n    concise=False,\n    description=\"Color:\",\n    value=\"white\",\n    style={\"description_width\": \"initial\"},\n    layout=widgets.Layout(width=widget_width, padding=padding),\n)\ncolor\n</pre> color = widgets.ColorPicker(     concise=False,     description=\"Color:\",     value=\"white\",     style={\"description_width\": \"initial\"},     layout=widgets.Layout(width=widget_width, padding=padding), ) color Out[20]: In\u00a0[21]: Copied! <pre>text = widgets.Text(\n    value=\"\",\n    description=\"Textbox:\",\n    placeholder=\"Enter sth.\",\n    style={\"description_width\": \"initial\"},\n    layout=widgets.Layout(width=widget_width, padding=padding),\n)\ntext\n</pre> text = widgets.Text(     value=\"\",     description=\"Textbox:\",     placeholder=\"Enter sth.\",     style={\"description_width\": \"initial\"},     layout=widgets.Layout(width=widget_width, padding=padding), ) text Out[21]: In\u00a0[22]: Copied! <pre>textarea = widgets.Textarea(\n    placeholder=\"Placeholder\",\n    layout=widgets.Layout(width=widget_width),\n)\ntextarea\n</pre> textarea = widgets.Textarea(     placeholder=\"Placeholder\",     layout=widgets.Layout(width=widget_width), ) textarea Out[22]: In\u00a0[23]: Copied! <pre>buttons = widgets.ToggleButtons(\n    value=None,\n    options=[\"Apply\", \"Reset\", \"Close\"],\n    tooltips=[\"Apply\", \"Reset\", \"Close\"],\n    button_style=\"primary\",\n)\nbuttons.style.button_width = \"80px\"\nbuttons\n</pre> buttons = widgets.ToggleButtons(     value=None,     options=[\"Apply\", \"Reset\", \"Close\"],     tooltips=[\"Apply\", \"Reset\", \"Close\"],     button_style=\"primary\", ) buttons.style.button_width = \"80px\" buttons Out[23]: In\u00a0[24]: Copied! <pre>output = widgets.Output(layout=widgets.Layout(padding=padding))\nwith output:\n    output.clear_output()\n    print(\"Running ...\")\noutput\n</pre> output = widgets.Output(layout=widgets.Layout(padding=padding)) with output:     output.clear_output()     print(\"Running ...\") output Out[24]: In\u00a0[25]: Copied! <pre>with output:\n    output.clear_output()\n    print(\"Running,please wait ...\")\n    display(buttons)\n</pre> with output:     output.clear_output()     print(\"Running,please wait ...\")     display(buttons) In\u00a0[26]: Copied! <pre>toolbar_widget = widgets.VBox()\ntoolbar_widget.children = [\n    widgets.HBox([close_button, toolbar_button]),\n    checkbox,\n    int_slider,\n    float_slider,\n    dropdown,\n    text,\n    color,\n    textarea,\n    buttons,\n    output,\n]\ntoolbar_widget\n</pre> toolbar_widget = widgets.VBox() toolbar_widget.children = [     widgets.HBox([close_button, toolbar_button]),     checkbox,     int_slider,     float_slider,     dropdown,     text,     color,     textarea,     buttons,     output, ] toolbar_widget Out[26]: In\u00a0[27]: Copied! <pre>m = ipyleaflet.Map(center=(40, -100), zoom=4)\nm.add_control(ipyleaflet.WidgetControl(widget=toolbar_widget, position=\"topright\"))\nm\n</pre> m = ipyleaflet.Map(center=(40, -100), zoom=4) m.add_control(ipyleaflet.WidgetControl(widget=toolbar_widget, position=\"topright\")) m Out[27]: In\u00a0[28]: Copied! <pre>widgets.jslink((int_slider, \"value\"), (m, \"zoom\"))\n</pre> widgets.jslink((int_slider, \"value\"), (m, \"zoom\")) Out[28]: <pre>Link(source=(IntSlider(value=4, continuous_update=False, description='zoom level: ', layout=Layout(padding='0px 0px 0px 4px', width='250px'), max=24, min=1, style=SliderStyle(description_width='initial')), 'value'), target=(Map(center=[40, -100], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text', 'zoom_out_title']), AttributionControl(options=['position', 'prefix'], position='bottomright'), WidgetControl(options=['position', 'transparent_bg'], position='topright', widget=VBox(children=(HBox(children=(ToggleButton(value=False, button_style='primary', icon='times', layout=Layout(height='28px', padding='0px 0px 0px 4px', width='28px'), tooltip='Close the tool'), ToggleButton(value=False, icon='gear', layout=Layout(height='28px', padding='0px 0px 0px 4px', width='28px'), tooltip='Toolbar'))), Checkbox(value=False, description='Click me', indent=False, layout=Layout(padding='0px 0px 0px 4px', width='250px')), IntSlider(value=4, continuous_update=False, description='zoom level: ', layout=Layout(padding='0px 0px 0px 4px', width='250px'), max=24, min=1, style=SliderStyle(description_width='initial')), FloatSlider(value=1.0, description='Float Slider: ', layout=Layout(padding='0px 0px 0px 4px', width='250px'), min=1.0, style=SliderStyle(description_width='initial')), Dropdown(description='Dropdown:', layout=Layout(padding='0px 0px 0px 4px', width='250px'), options=('Option 1', 'Option 2', 'Option 3'), style=DescriptionStyle(description_width='initial'), value=None), Text(value='', description='Textbox:', layout=Layout(padding='0px 0px 0px 4px', width='250px'), placeholder='Enter sth.', style=TextStyle(description_width='initial')), ColorPicker(value='white', description='Color:', layout=Layout(padding='0px 0px 0px 4px', width='250px'), style=DescriptionStyle(description_width='initial')), Textarea(value='', layout=Layout(width='250px'), placeholder='Placeholder'), ToggleButtons(button_style='primary', options=('Apply', 'Reset', 'Close'), style=ToggleButtonsStyle(button_width='80px'), tooltips=('Apply', 'Reset', 'Close'), value=None), Output(layout=Layout(padding='0px 0px 0px 4px'), outputs=({'output_type': 'stream', 'name': 'stdout', 'text': 'Running,please wait ...\\n'}, {'output_type': 'display_data', 'metadata': {}, 'data': {'text/plain': \"ToggleButtons(button_style='primary', options=('Apply', 'Reset', 'Close'), style=ToggleButtonsStyle(button_wid\u2026\", 'application/vnd.jupyter.widget-view+json': {'version_major': 2, 'version_minor': 0, 'model_id': 'd8d75e2bec694f4897676e9c4d6f10a5'}}})))))), crs={'name': 'EPSG3857', 'custom': False}, default_style=MapStyle(), dragging_style=MapStyle(cursor='move'), layers=(TileLayer(attribution='&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors', base=True, max_zoom=19, min_zoom=1, name='OpenStreetMap.Mapnik', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'),), options=['bounce_at_zoom_limits', 'box_zoom', 'center', 'close_popup_on_click', 'double_click_zoom', 'dragging', 'fullscreen', 'inertia', 'inertia_deceleration', 'inertia_max_speed', 'interpolation', 'keyboard', 'keyboard_pan_offset', 'keyboard_zoom_offset', 'max_zoom', 'min_zoom', 'prefer_canvas', 'scroll_wheel_zoom', 'tap', 'tap_tolerance', 'touch_zoom', 'world_copy_jump', 'zoom', 'zoom_animation_threshold', 'zoom_delta', 'zoom_snap'], style=MapStyle(), zoom=4.0), 'zoom'))</pre> In\u00a0[29]: Copied! <pre>widgets.jslink((m, \"center\"),(text, \"value\"))\n</pre> widgets.jslink((m, \"center\"),(text, \"value\")) Out[29]: <pre>Link(source=(Map(center=[40, -100], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text', 'zoom_out_title']), AttributionControl(options=['position', 'prefix'], position='bottomright'), WidgetControl(options=['position', 'transparent_bg'], position='topright', widget=VBox(children=(HBox(children=(ToggleButton(value=False, button_style='primary', icon='times', layout=Layout(height='28px', padding='0px 0px 0px 4px', width='28px'), tooltip='Close the tool'), ToggleButton(value=False, icon='gear', layout=Layout(height='28px', padding='0px 0px 0px 4px', width='28px'), tooltip='Toolbar'))), Checkbox(value=False, description='Click me', indent=False, layout=Layout(padding='0px 0px 0px 4px', width='250px')), IntSlider(value=4, continuous_update=False, description='zoom level: ', layout=Layout(padding='0px 0px 0px 4px', width='250px'), max=24, min=1, style=SliderStyle(description_width='initial')), FloatSlider(value=1.0, description='Float Slider: ', layout=Layout(padding='0px 0px 0px 4px', width='250px'), min=1.0, style=SliderStyle(description_width='initial')), Dropdown(description='Dropdown:', layout=Layout(padding='0px 0px 0px 4px', width='250px'), options=('Option 1', 'Option 2', 'Option 3'), style=DescriptionStyle(description_width='initial'), value=None), Text(value='', description='Textbox:', layout=Layout(padding='0px 0px 0px 4px', width='250px'), placeholder='Enter sth.', style=TextStyle(description_width='initial')), ColorPicker(value='white', description='Color:', layout=Layout(padding='0px 0px 0px 4px', width='250px'), style=DescriptionStyle(description_width='initial')), Textarea(value='', layout=Layout(width='250px'), placeholder='Placeholder'), ToggleButtons(button_style='primary', options=('Apply', 'Reset', 'Close'), style=ToggleButtonsStyle(button_width='80px'), tooltips=('Apply', 'Reset', 'Close'), value=None), Output(layout=Layout(padding='0px 0px 0px 4px'), outputs=({'output_type': 'stream', 'name': 'stdout', 'text': 'Running,please wait ...\\n'}, {'output_type': 'display_data', 'metadata': {}, 'data': {'text/plain': \"ToggleButtons(button_style='primary', options=('Apply', 'Reset', 'Close'), style=ToggleButtonsStyle(button_wid\u2026\", 'application/vnd.jupyter.widget-view+json': {'version_major': 2, 'version_minor': 0, 'model_id': 'd8d75e2bec694f4897676e9c4d6f10a5'}}})))))), crs={'name': 'EPSG3857', 'custom': False}, default_style=MapStyle(), dragging_style=MapStyle(cursor='move'), layers=(TileLayer(attribution='&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors', base=True, max_zoom=19, min_zoom=1, name='OpenStreetMap.Mapnik', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'),), options=['bounce_at_zoom_limits', 'box_zoom', 'center', 'close_popup_on_click', 'double_click_zoom', 'dragging', 'fullscreen', 'inertia', 'inertia_deceleration', 'inertia_max_speed', 'interpolation', 'keyboard', 'keyboard_pan_offset', 'keyboard_zoom_offset', 'max_zoom', 'min_zoom', 'prefer_canvas', 'scroll_wheel_zoom', 'tap', 'tap_tolerance', 'touch_zoom', 'world_copy_jump', 'zoom', 'zoom_animation_threshold', 'zoom_delta', 'zoom_snap'], style=MapStyle(), zoom=4.0), 'center'), target=(Text(value='', description='Textbox:', layout=Layout(padding='0px 0px 0px 4px', width='250px'), placeholder='Enter sth.', style=TextStyle(description_width='initial')), 'value'))</pre>"},{"location":"examples/lab7_folium/","title":"Lab7 folium","text":"In\u00a0[1]: Copied! <pre># try folium map\nimport rasterarea.foliummap as foliummap\n</pre> # try folium map import rasterarea.foliummap as foliummap In\u00a0[2]: Copied! <pre>m = foliummap.Map(center=[40, -100], zoom=5)\n# add basemap\nm.add_basemap(basemap = \"Roadmap\",attribution=\"Google\")\n\n# add a shpfile layer\nurl = \"http://www2.census.gov/geo/tiger/GENZ2015/shp/cb_2015_us_county_500k.zip\"\nm.add_shp(url, name=\"US Counties\")\nm\n</pre> m = foliummap.Map(center=[40, -100], zoom=5) # add basemap m.add_basemap(basemap = \"Roadmap\",attribution=\"Google\")  # add a shpfile layer url = \"http://www2.census.gov/geo/tiger/GENZ2015/shp/cb_2015_us_county_500k.zip\" m.add_shp(url, name=\"US Counties\") m Out[2]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/lab7_leaflet/","title":"Lab7 leaflet","text":"In\u00a0[1]: Copied! <pre>import rasterarea.ipyleafletmap as ipyleafletmap\n</pre> import rasterarea.ipyleafletmap as ipyleafletmap In\u00a0[2]: Copied! <pre>m = ipyleafletmap.Map(center=[40, -100], zoom=5)\nm\n</pre> m = ipyleafletmap.Map(center=[40, -100], zoom=5) m Out[2]: In\u00a0[3]: Copied! <pre># add a basemap\nm.add_basemap(\"roadmap\")\n</pre> # add a basemap m.add_basemap(\"roadmap\")  In\u00a0[4]: Copied! <pre># add a shpfile layer\nurl = \"http://www2.census.gov/geo/tiger/GENZ2015/shp/cb_2015_us_county_500k.zip\"\nm.add_shp(url, name=\"US Counties\")\n</pre> # add a shpfile layer url = \"http://www2.census.gov/geo/tiger/GENZ2015/shp/cb_2015_us_county_500k.zip\" m.add_shp(url, name=\"US Counties\")"},{"location":"examples/lab8/","title":"Lab8","text":"In\u00a0[1]: Copied! <pre># pip install rasterarea\nfrom rasterarea import ipyleafletmap\n</pre> # pip install rasterarea from rasterarea import ipyleafletmap In\u00a0[2]: Copied! <pre># create a map\nm = ipyleafletmap.Map()\nm\n</pre> # create a map m = ipyleafletmap.Map() m  Out[2]: In\u00a0[3]: Copied! <pre>url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\"\n</pre> url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\" In\u00a0[4]: Copied! <pre># add a raster layer\nm.add_raster(url, name=\"oil_spill\")\n</pre> # add a raster layer m.add_raster(url, name=\"oil_spill\") In\u00a0[5]: Copied! <pre>#add an image from url\nm.add_image( url= 'https://media4.giphy.com/media/fC1HPbYpydrqM/200.gif', width ='300', height='300')\n</pre> #add an image from url m.add_image( url= 'https://media4.giphy.com/media/fC1HPbYpydrqM/200.gif', width ='300', height='300')"},{"location":"examples/lab9/","title":"Lab9","text":"In\u00a0[1]: Copied! <pre>from rasterarea import ipyleafletmap\n</pre> from rasterarea import ipyleafletmap In\u00a0[2]: Copied! <pre>m = ipyleafletmap.Map(center=(52.204793, 360.121558), zoom=9)\nm\n</pre> m = ipyleafletmap.Map(center=(52.204793, 360.121558), zoom=9) m Out[2]: In\u00a0[3]: Copied! <pre>m.add_toolbar()\n</pre> m.add_toolbar()"},{"location":"examples/test/","title":"Test","text":"In\u00a0[1]: Copied! <pre>import leafmap\nimport rasterio\nimport geopandas as gpd\n</pre> import leafmap import rasterio import geopandas as gpd <pre>\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\nCell In[1], line 1\n----&gt; 1 import leafmap\n      2 import rasterio\n      3 import geopandas as gpd\n\nModuleNotFoundError: No module named 'leafmap'</pre> In\u00a0[2]: Copied! <pre>bbox = [-77.124771, 38.790362, -76.903944, 39.000275]\n</pre> bbox = [-77.124771, 38.790362, -76.903944, 39.000275] In\u00a0[3]: Copied! <pre>url = 'https://planetarycomputer.microsoft.com/api/stac/v1/'\ncollection = '3dep-lidar-hag'\n</pre> url = 'https://planetarycomputer.microsoft.com/api/stac/v1/' collection = '3dep-lidar-hag' In\u00a0[4]: Copied! <pre>search = leafmap.stac_search(\n    url=url,\n    max_items=10,\n    collections=[collection],\n    bbox=bbox,\n)\nsearch\n</pre> search = leafmap.stac_search(     url=url,     max_items=10,     collections=[collection],     bbox=bbox, ) search  <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[4], line 1\n----&gt; 1 search = leafmap.stac_search(\n      2     url=url,\n      3     max_items=10,\n      4     collections=[collection],\n      5     bbox=bbox,\n      6 )\n      7 search\n\nNameError: name 'leafmap' is not defined</pre> In\u00a0[5]: Copied! <pre>search = leafmap.stac_search(\n    url=url,\n    max_items=5000,\n    collections=[collection],\n    bbox=bbox,\n    get_gdf=True,\n)\nsearch\n</pre> search = leafmap.stac_search(     url=url,     max_items=5000,     collections=[collection],     bbox=bbox,     get_gdf=True, ) search <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[5], line 1\n----&gt; 1 search = leafmap.stac_search(\n      2     url=url,\n      3     max_items=5000,\n      4     collections=[collection],\n      5     bbox=bbox,\n      6     get_gdf=True,\n      7 )\n      8 search\n\nNameError: name 'leafmap' is not defined</pre> In\u00a0[6]: Copied! <pre>search.explore()\n</pre> search.explore() <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[6], line 1\n----&gt; 1 search.explore()\n\nNameError: name 'search' is not defined</pre> In\u00a0[7]: Copied! <pre>search = leafmap.stac_search(\n    url=url,\n    max_items=10,\n    collections=[collection],\n    bbox=bbox,\n    get_links=True,\n)\nsearch\n</pre> search = leafmap.stac_search(     url=url,     max_items=10,     collections=[collection],     bbox=bbox,     get_links=True, ) search <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[7], line 1\n----&gt; 1 search = leafmap.stac_search(\n      2     url=url,\n      3     max_items=10,\n      4     collections=[collection],\n      5     bbox=bbox,\n      6     get_links=True,\n      7 )\n      8 search\n\nNameError: name 'leafmap' is not defined</pre> In\u00a0[8]: Copied! <pre>search = leafmap.stac_search(\n    url=url,\n    max_items=10,\n    collections=[collection],\n    bbox=bbox,\n    get_collection=True,\n)\nsearch\n</pre> search = leafmap.stac_search(     url=url,     max_items=10,     collections=[collection],     bbox=bbox,     get_collection=True, ) search <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[8], line 1\n----&gt; 1 search = leafmap.stac_search(\n      2     url=url,\n      3     max_items=10,\n      4     collections=[collection],\n      5     bbox=bbox,\n      6     get_collection=True,\n      7 )\n      8 search\n\nNameError: name 'leafmap' is not defined</pre> In\u00a0[9]: Copied! <pre>search = leafmap.stac_search(\n    url=url,\n    max_items=10,\n    collections=[collection],\n    bbox=bbox,\n    get_items=True,\n)\nsearch\n</pre> search = leafmap.stac_search(     url=url,     max_items=10,     collections=[collection],     bbox=bbox,     get_items=True, ) search <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[9], line 1\n----&gt; 1 search = leafmap.stac_search(\n      2     url=url,\n      3     max_items=10,\n      4     collections=[collection],\n      5     bbox=bbox,\n      6     get_items=True,\n      7 )\n      8 search\n\nNameError: name 'leafmap' is not defined</pre> In\u00a0[10]: Copied! <pre>href = search[2].assets['data'].href\nhref\n</pre> href = search[2].assets['data'].href href <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[10], line 1\n----&gt; 1 href = search[2].assets['data'].href\n      2 href\n\nNameError: name 'search' is not defined</pre> In\u00a0[11]: Copied! <pre>item = 'USGS_LPC_VA_Fairfax_County_2018-hag-2m-5-3'\n</pre> item = 'USGS_LPC_VA_Fairfax_County_2018-hag-2m-5-3' In\u00a0[12]: Copied! <pre>leafmap.stac_assets(collection=collection, item=item, titiler_endpoint=\"pc\")\n</pre> leafmap.stac_assets(collection=collection, item=item, titiler_endpoint=\"pc\") <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[12], line 1\n----&gt; 1 leafmap.stac_assets(collection=collection, item=item, titiler_endpoint=\"pc\")\n\nNameError: name 'leafmap' is not defined</pre> In\u00a0[13]: Copied! <pre>m = leafmap.Map()\nm.add_stac_layer(\n    collection=collection,\n    item=item,\n    assets=[\"data\"],\n    name=\"Height\",\n    palette='terrain'\n)\nm\n</pre> m = leafmap.Map() m.add_stac_layer(     collection=collection,     item=item,     assets=[\"data\"],     name=\"Height\",     palette='terrain' ) m <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[13], line 1\n----&gt; 1 m = leafmap.Map()\n      2 m.add_stac_layer(\n      3     collection=collection,\n      4     item=item,\n   (...)\n      7     palette='terrain'\n      8 )\n      9 m\n\nNameError: name 'leafmap' is not defined</pre>"},{"location":"examples/test1/","title":"Test1","text":"In\u00a0[1]: Copied! <pre>%pip install rasterarea\n</pre> %pip install rasterarea <pre>Requirement already satisfied: rasterarea in /home/runner/.local/lib/python3.9/site-packages (0.0.6)\r\nRequirement already satisfied: folium in /home/runner/.local/lib/python3.9/site-packages (from rasterarea) (0.14.0)\r\nRequirement already satisfied: ipyleaflet in /home/runner/.local/lib/python3.9/site-packages (from rasterarea) (0.17.2)\r\nRequirement already satisfied: ipywidgets in /home/runner/.local/lib/python3.9/site-packages (from rasterarea) (8.0.6)\r\nRequirement already satisfied: geopandas in /home/runner/.local/lib/python3.9/site-packages (from rasterarea) (0.13.0)\r\nRequirement already satisfied: httpx in /home/runner/.local/lib/python3.9/site-packages (from rasterarea) (0.24.0)\r\nRequirement already satisfied: rasterio in /home/runner/.local/lib/python3.9/site-packages (from rasterarea) (1.3.6)\r\nRequirement already satisfied: lidario in /home/runner/.local/lib/python3.9/site-packages (from rasterarea) (0.3.0)\r\nRequirement already satisfied: numpy in /home/runner/.local/lib/python3.9/site-packages (from rasterarea) (1.24.3)\r\nRequirement already satisfied: pandas in /home/runner/.local/lib/python3.9/site-packages (from rasterarea) (2.0.1)\r\nRequirement already satisfied: geojson in /home/runner/.local/lib/python3.9/site-packages (from rasterarea) (3.0.1)\r\nRequirement already satisfied: xyzservices in /home/runner/.local/lib/python3.9/site-packages (from rasterarea) (2023.2.0)\r\nRequirement already satisfied: geemap in /home/runner/.local/lib/python3.9/site-packages (from rasterarea) (0.20.6)\r\nRequirement already satisfied: matplotlib in /home/runner/.local/lib/python3.9/site-packages (from rasterarea) (3.7.1)\r\nRequirement already satisfied: ipyfilechooser in /home/runner/.local/lib/python3.9/site-packages (from rasterarea) (0.6.0)\r\nRequirement already satisfied: netCDF4 in /home/runner/.local/lib/python3.9/site-packages (from rasterarea) (1.6.3)\r\nRequirement already satisfied: traitlets in /home/runner/.local/lib/python3.9/site-packages (from rasterarea) (5.9.0)\r\nRequirement already satisfied: branca&gt;=0.6.0 in /home/runner/.local/lib/python3.9/site-packages (from folium-&gt;rasterarea) (0.6.0)\r\nRequirement already satisfied: jinja2&gt;=2.9 in /home/runner/.local/lib/python3.9/site-packages (from folium-&gt;rasterarea) (3.1.2)\r\nRequirement already satisfied: requests in /home/runner/.local/lib/python3.9/site-packages (from folium-&gt;rasterarea) (2.30.0)\r\nRequirement already satisfied: bqplot in /home/runner/.local/lib/python3.9/site-packages (from geemap-&gt;rasterarea) (0.12.39)\r\nRequirement already satisfied: colour in /home/runner/.local/lib/python3.9/site-packages (from geemap-&gt;rasterarea) (0.1.5)\r\nRequirement already satisfied: earthengine-api&gt;=0.1.347 in /home/runner/.local/lib/python3.9/site-packages (from geemap-&gt;rasterarea) (0.1.353)\r\nRequirement already satisfied: eerepr&gt;=0.0.4 in /home/runner/.local/lib/python3.9/site-packages (from geemap-&gt;rasterarea) (0.0.4)\r\nRequirement already satisfied: geocoder in /home/runner/.local/lib/python3.9/site-packages (from geemap-&gt;rasterarea) (1.38.1)\r\nRequirement already satisfied: ipyevents in /home/runner/.local/lib/python3.9/site-packages (from geemap-&gt;rasterarea) (2.0.1)\r\nRequirement already satisfied: ipytree in /home/runner/.local/lib/python3.9/site-packages (from geemap-&gt;rasterarea) (0.2.2)\r\nRequirement already satisfied: plotly in /home/runner/.local/lib/python3.9/site-packages (from geemap-&gt;rasterarea) (5.14.1)\r\nRequirement already satisfied: pyperclip in /home/runner/.local/lib/python3.9/site-packages (from geemap-&gt;rasterarea) (1.8.2)\r\nRequirement already satisfied: python-box in /home/runner/.local/lib/python3.9/site-packages (from geemap-&gt;rasterarea) (7.0.1)\r\nRequirement already satisfied: scooby in /home/runner/.local/lib/python3.9/site-packages (from geemap-&gt;rasterarea) (0.7.2)\r\nRequirement already satisfied: traittypes&lt;3,&gt;=0.2.1 in /home/runner/.local/lib/python3.9/site-packages (from ipyleaflet-&gt;rasterarea) (0.2.1)\r\nRequirement already satisfied: ipykernel&gt;=4.5.1 in /home/runner/.local/lib/python3.9/site-packages (from ipywidgets-&gt;rasterarea) (6.23.0)\r\nRequirement already satisfied: ipython&gt;=6.1.0 in /home/runner/.local/lib/python3.9/site-packages (from ipywidgets-&gt;rasterarea) (8.13.2)\r\nRequirement already satisfied: widgetsnbextension~=4.0.7 in /home/runner/.local/lib/python3.9/site-packages (from ipywidgets-&gt;rasterarea) (4.0.7)\r\nRequirement already satisfied: jupyterlab-widgets~=3.0.7 in /home/runner/.local/lib/python3.9/site-packages (from ipywidgets-&gt;rasterarea) (3.0.7)\r\nRequirement already satisfied: fiona&gt;=1.8.19 in /home/runner/.local/lib/python3.9/site-packages (from geopandas-&gt;rasterarea) (1.9.3)\r\nRequirement already satisfied: packaging in /home/runner/.local/lib/python3.9/site-packages (from geopandas-&gt;rasterarea) (23.1)\r\nRequirement already satisfied: pyproj&gt;=3.0.1 in /home/runner/.local/lib/python3.9/site-packages (from geopandas-&gt;rasterarea) (3.5.0)\r\nRequirement already satisfied: shapely&gt;=1.7.1 in /home/runner/.local/lib/python3.9/site-packages (from geopandas-&gt;rasterarea) (2.0.1)\r\nRequirement already satisfied: python-dateutil&gt;=2.8.2 in /home/runner/.local/lib/python3.9/site-packages (from pandas-&gt;rasterarea) (2.8.2)\r\nRequirement already satisfied: pytz&gt;=2020.1 in /home/runner/.local/lib/python3.9/site-packages (from pandas-&gt;rasterarea) (2023.3)\r\nRequirement already satisfied: tzdata&gt;=2022.1 in /home/runner/.local/lib/python3.9/site-packages (from pandas-&gt;rasterarea) (2023.3)\r\nRequirement already satisfied: certifi in /home/runner/.local/lib/python3.9/site-packages (from httpx-&gt;rasterarea) (2023.5.7)\r\nRequirement already satisfied: httpcore&lt;0.18.0,&gt;=0.15.0 in /home/runner/.local/lib/python3.9/site-packages (from httpx-&gt;rasterarea) (0.17.0)\r\nRequirement already satisfied: idna in /home/runner/.local/lib/python3.9/site-packages (from httpx-&gt;rasterarea) (3.4)\r\nRequirement already satisfied: sniffio in /home/runner/.local/lib/python3.9/site-packages (from httpx-&gt;rasterarea) (1.3.0)\r\nRequirement already satisfied: plyfile in /home/runner/.local/lib/python3.9/site-packages (from lidario-&gt;rasterarea) (0.9)\r\nRequirement already satisfied: contourpy&gt;=1.0.1 in /home/runner/.local/lib/python3.9/site-packages (from matplotlib-&gt;rasterarea) (1.0.7)\r\nRequirement already satisfied: cycler&gt;=0.10 in /home/runner/.local/lib/python3.9/site-packages (from matplotlib-&gt;rasterarea) (0.11.0)\r\nRequirement already satisfied: fonttools&gt;=4.22.0 in /home/runner/.local/lib/python3.9/site-packages (from matplotlib-&gt;rasterarea) (4.39.4)\r\nRequirement already satisfied: kiwisolver&gt;=1.0.1 in /home/runner/.local/lib/python3.9/site-packages (from matplotlib-&gt;rasterarea) (1.4.4)\r\nRequirement already satisfied: pillow&gt;=6.2.0 in /home/runner/.local/lib/python3.9/site-packages (from matplotlib-&gt;rasterarea) (9.5.0)\r\nRequirement already satisfied: pyparsing&gt;=2.3.1 in /home/runner/.local/lib/python3.9/site-packages (from matplotlib-&gt;rasterarea) (3.0.9)\r\nRequirement already satisfied: importlib-resources&gt;=3.2.0 in /home/runner/.local/lib/python3.9/site-packages (from matplotlib-&gt;rasterarea) (5.12.0)\r\nRequirement already satisfied: cftime in /home/runner/.local/lib/python3.9/site-packages (from netCDF4-&gt;rasterarea) (1.6.2)\r\nRequirement already satisfied: affine in /home/runner/.local/lib/python3.9/site-packages (from rasterio-&gt;rasterarea) (2.4.0)\r\nRequirement already satisfied: attrs in /home/runner/.local/lib/python3.9/site-packages (from rasterio-&gt;rasterarea) (23.1.0)\r\nRequirement already satisfied: click&gt;=4.0 in /home/runner/.local/lib/python3.9/site-packages (from rasterio-&gt;rasterarea) (8.1.3)\r\nRequirement already satisfied: cligj&gt;=0.5 in /home/runner/.local/lib/python3.9/site-packages (from rasterio-&gt;rasterarea) (0.7.2)\r\nRequirement already satisfied: snuggs&gt;=1.4.1 in /home/runner/.local/lib/python3.9/site-packages (from rasterio-&gt;rasterarea) (1.4.7)\r\nRequirement already satisfied: click-plugins in /home/runner/.local/lib/python3.9/site-packages (from rasterio-&gt;rasterarea) (1.1.1)\r\nRequirement already satisfied: setuptools in /opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages (from rasterio-&gt;rasterarea) (58.1.0)\r\nRequirement already satisfied: google-cloud-storage in /home/runner/.local/lib/python3.9/site-packages (from earthengine-api&gt;=0.1.347-&gt;geemap-&gt;rasterarea) (2.9.0)\r\nRequirement already satisfied: google-api-python-client&gt;=1.12.1 in /home/runner/.local/lib/python3.9/site-packages (from earthengine-api&gt;=0.1.347-&gt;geemap-&gt;rasterarea) (2.86.0)\r\nRequirement already satisfied: google-auth&gt;=1.4.1 in /home/runner/.local/lib/python3.9/site-packages (from earthengine-api&gt;=0.1.347-&gt;geemap-&gt;rasterarea) (2.18.0)\r\nRequirement already satisfied: google-auth-httplib2&gt;=0.0.3 in /home/runner/.local/lib/python3.9/site-packages (from earthengine-api&gt;=0.1.347-&gt;geemap-&gt;rasterarea) (0.1.0)\r\nRequirement already satisfied: httplib2&lt;1dev,&gt;=0.9.2 in /home/runner/.local/lib/python3.9/site-packages (from earthengine-api&gt;=0.1.347-&gt;geemap-&gt;rasterarea) (0.22.0)\r\nRequirement already satisfied: munch&gt;=2.3.2 in /home/runner/.local/lib/python3.9/site-packages (from fiona&gt;=1.8.19-&gt;geopandas-&gt;rasterarea) (2.5.0)\r\nRequirement already satisfied: importlib-metadata in /home/runner/.local/lib/python3.9/site-packages (from fiona&gt;=1.8.19-&gt;geopandas-&gt;rasterarea) (6.6.0)\r\nRequirement already satisfied: h11&lt;0.15,&gt;=0.13 in /home/runner/.local/lib/python3.9/site-packages (from httpcore&lt;0.18.0,&gt;=0.15.0-&gt;httpx-&gt;rasterarea) (0.14.0)\r\nRequirement already satisfied: anyio&lt;5.0,&gt;=3.0 in /home/runner/.local/lib/python3.9/site-packages (from httpcore&lt;0.18.0,&gt;=0.15.0-&gt;httpx-&gt;rasterarea) (3.6.2)\r\nRequirement already satisfied: zipp&gt;=3.1.0 in /home/runner/.local/lib/python3.9/site-packages (from importlib-resources&gt;=3.2.0-&gt;matplotlib-&gt;rasterarea) (3.15.0)\r\nRequirement already satisfied: comm&gt;=0.1.1 in /home/runner/.local/lib/python3.9/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets-&gt;rasterarea) (0.1.3)\r\nRequirement already satisfied: debugpy&gt;=1.6.5 in /home/runner/.local/lib/python3.9/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets-&gt;rasterarea) (1.6.7)\r\nRequirement already satisfied: jupyter-client&gt;=6.1.12 in /home/runner/.local/lib/python3.9/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets-&gt;rasterarea) (8.2.0)\r\nRequirement already satisfied: jupyter-core!=5.0.*,&gt;=4.12 in /home/runner/.local/lib/python3.9/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets-&gt;rasterarea) (5.3.0)\r\nRequirement already satisfied: matplotlib-inline&gt;=0.1 in /home/runner/.local/lib/python3.9/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets-&gt;rasterarea) (0.1.6)\r\nRequirement already satisfied: nest-asyncio in /home/runner/.local/lib/python3.9/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets-&gt;rasterarea) (1.5.6)\r\nRequirement already satisfied: psutil in /home/runner/.local/lib/python3.9/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets-&gt;rasterarea) (5.9.5)\r\nRequirement already satisfied: pyzmq&gt;=20 in /home/runner/.local/lib/python3.9/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets-&gt;rasterarea) (25.0.2)\r\nRequirement already satisfied: tornado&gt;=6.1 in /home/runner/.local/lib/python3.9/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets-&gt;rasterarea) (6.3.1)\r\nRequirement already satisfied: backcall in /home/runner/.local/lib/python3.9/site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets-&gt;rasterarea) (0.2.0)\r\nRequirement already satisfied: decorator in /home/runner/.local/lib/python3.9/site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets-&gt;rasterarea) (5.1.1)\r\nRequirement already satisfied: jedi&gt;=0.16 in /home/runner/.local/lib/python3.9/site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets-&gt;rasterarea) (0.18.2)\r\nRequirement already satisfied: pickleshare in /home/runner/.local/lib/python3.9/site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets-&gt;rasterarea) (0.7.5)\r\nRequirement already satisfied: prompt-toolkit!=3.0.37,&lt;3.1.0,&gt;=3.0.30 in /home/runner/.local/lib/python3.9/site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets-&gt;rasterarea) (3.0.38)\r\nRequirement already satisfied: pygments&gt;=2.4.0 in /home/runner/.local/lib/python3.9/site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets-&gt;rasterarea) (2.15.1)\r\nRequirement already satisfied: stack-data in /home/runner/.local/lib/python3.9/site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets-&gt;rasterarea) (0.6.2)\r\nRequirement already satisfied: typing-extensions in /home/runner/.local/lib/python3.9/site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets-&gt;rasterarea) (4.5.0)\r\nRequirement already satisfied: pexpect&gt;4.3 in /home/runner/.local/lib/python3.9/site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets-&gt;rasterarea) (4.8.0)\r\nRequirement already satisfied: MarkupSafe&gt;=2.0 in /home/runner/.local/lib/python3.9/site-packages (from jinja2&gt;=2.9-&gt;folium-&gt;rasterarea) (2.1.2)\r\nRequirement already satisfied: six&gt;=1.5 in /home/runner/.local/lib/python3.9/site-packages (from python-dateutil&gt;=2.8.2-&gt;pandas-&gt;rasterarea) (1.16.0)\r\nRequirement already satisfied: future in /home/runner/.local/lib/python3.9/site-packages (from geocoder-&gt;geemap-&gt;rasterarea) (0.18.3)\r\nRequirement already satisfied: ratelim in /home/runner/.local/lib/python3.9/site-packages (from geocoder-&gt;geemap-&gt;rasterarea) (0.1.6)\r\nRequirement already satisfied: tenacity&gt;=6.2.0 in /home/runner/.local/lib/python3.9/site-packages (from plotly-&gt;geemap-&gt;rasterarea) (8.2.2)\r\nRequirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /home/runner/.local/lib/python3.9/site-packages (from requests-&gt;folium-&gt;rasterarea) (3.1.0)\r\nRequirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in /home/runner/.local/lib/python3.9/site-packages (from requests-&gt;folium-&gt;rasterarea) (1.26.15)\r\nRequirement already satisfied: google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,&lt;3.0.0dev,&gt;=1.31.5 in /home/runner/.local/lib/python3.9/site-packages (from google-api-python-client&gt;=1.12.1-&gt;earthengine-api&gt;=0.1.347-&gt;geemap-&gt;rasterarea) (2.11.0)\r\nRequirement already satisfied: uritemplate&lt;5,&gt;=3.0.1 in /home/runner/.local/lib/python3.9/site-packages (from google-api-python-client&gt;=1.12.1-&gt;earthengine-api&gt;=0.1.347-&gt;geemap-&gt;rasterarea) (4.1.1)\r\nRequirement already satisfied: cachetools&lt;6.0,&gt;=2.0.0 in /home/runner/.local/lib/python3.9/site-packages (from google-auth&gt;=1.4.1-&gt;earthengine-api&gt;=0.1.347-&gt;geemap-&gt;rasterarea) (5.3.0)\r\nRequirement already satisfied: pyasn1-modules&gt;=0.2.1 in /home/runner/.local/lib/python3.9/site-packages (from google-auth&gt;=1.4.1-&gt;earthengine-api&gt;=0.1.347-&gt;geemap-&gt;rasterarea) (0.3.0)\r\nRequirement already satisfied: rsa&lt;5,&gt;=3.1.4 in /home/runner/.local/lib/python3.9/site-packages (from google-auth&gt;=1.4.1-&gt;earthengine-api&gt;=0.1.347-&gt;geemap-&gt;rasterarea) (4.9)\r\nRequirement already satisfied: parso&lt;0.9.0,&gt;=0.8.0 in /home/runner/.local/lib/python3.9/site-packages (from jedi&gt;=0.16-&gt;ipython&gt;=6.1.0-&gt;ipywidgets-&gt;rasterarea) (0.8.3)\r\nRequirement already satisfied: platformdirs&gt;=2.5 in /home/runner/.local/lib/python3.9/site-packages (from jupyter-core!=5.0.*,&gt;=4.12-&gt;ipykernel&gt;=4.5.1-&gt;ipywidgets-&gt;rasterarea) (3.5.1)\r\nRequirement already satisfied: ptyprocess&gt;=0.5 in /home/runner/.local/lib/python3.9/site-packages (from pexpect&gt;4.3-&gt;ipython&gt;=6.1.0-&gt;ipywidgets-&gt;rasterarea) (0.7.0)\r\nRequirement already satisfied: wcwidth in /home/runner/.local/lib/python3.9/site-packages (from prompt-toolkit!=3.0.37,&lt;3.1.0,&gt;=3.0.30-&gt;ipython&gt;=6.1.0-&gt;ipywidgets-&gt;rasterarea) (0.2.6)\r\nRequirement already satisfied: google-cloud-core&lt;3.0dev,&gt;=2.3.0 in /home/runner/.local/lib/python3.9/site-packages (from google-cloud-storage-&gt;earthengine-api&gt;=0.1.347-&gt;geemap-&gt;rasterarea) (2.3.2)\r\nRequirement already satisfied: google-resumable-media&gt;=2.3.2 in /home/runner/.local/lib/python3.9/site-packages (from google-cloud-storage-&gt;earthengine-api&gt;=0.1.347-&gt;geemap-&gt;rasterarea) (2.5.0)\r\nRequirement already satisfied: executing&gt;=1.2.0 in /home/runner/.local/lib/python3.9/site-packages (from stack-data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets-&gt;rasterarea) (1.2.0)\r\nRequirement already satisfied: asttokens&gt;=2.1.0 in /home/runner/.local/lib/python3.9/site-packages (from stack-data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets-&gt;rasterarea) (2.2.1)\r\nRequirement already satisfied: pure-eval in /home/runner/.local/lib/python3.9/site-packages (from stack-data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets-&gt;rasterarea) (0.2.2)\r\nRequirement already satisfied: googleapis-common-protos&lt;2.0dev,&gt;=1.56.2 in /home/runner/.local/lib/python3.9/site-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,&lt;3.0.0dev,&gt;=1.31.5-&gt;google-api-python-client&gt;=1.12.1-&gt;earthengine-api&gt;=0.1.347-&gt;geemap-&gt;rasterarea) (1.59.0)\r\nRequirement already satisfied: protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,&lt;5.0.0dev,&gt;=3.19.5 in /home/runner/.local/lib/python3.9/site-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,&lt;3.0.0dev,&gt;=1.31.5-&gt;google-api-python-client&gt;=1.12.1-&gt;earthengine-api&gt;=0.1.347-&gt;geemap-&gt;rasterarea) (4.23.0)\r\nRequirement already satisfied: google-crc32c&lt;2.0dev,&gt;=1.0 in /home/runner/.local/lib/python3.9/site-packages (from google-resumable-media&gt;=2.3.2-&gt;google-cloud-storage-&gt;earthengine-api&gt;=0.1.347-&gt;geemap-&gt;rasterarea) (1.5.0)\r\nRequirement already satisfied: pyasn1&lt;0.6.0,&gt;=0.4.6 in /home/runner/.local/lib/python3.9/site-packages (from pyasn1-modules&gt;=0.2.1-&gt;google-auth&gt;=1.4.1-&gt;earthengine-api&gt;=0.1.347-&gt;geemap-&gt;rasterarea) (0.5.0)\r\nNote: you may need to restart the kernel to use updated packages.\n</pre> In\u00a0[2]: Copied! <pre>import rasterarea\n</pre> import rasterarea In\u00a0[3]: Copied! <pre>from osgeo import osr, gdal\nimport os, sys\n\n#check for correct number of arguments\n\ninputfilename = sys.argv[1]\nbasefilename = sys.argv[1].split(\".\")[0]\ntextoutput = open(basefilename+\".latlng\", \"w\")\n\nds = gdal.Open(inputfilename)\n\n# get the existing coordinate system\nold_cs = osr.SpatialReference()\nold_cs.ImportFromWkt(ds.GetProjectionRef())\n\n# create the new coordinate system,\n# wgs84 AKA latitude/longitude which Google Maps requires\nwgs84_wkt = \"\"\"\nGEOGCS[\"WGS 84\",\n    DATUM[\"WGS_1984\",\n        SPHEROID[\"WGS 84\",6378137,298.257223563,\n            AUTHORITY[\"EPSG\",\"7030\"]],\n        AUTHORITY[\"EPSG\",\"6326\"]],\n    PRIMEM[\"Greenwich\",0,\n        AUTHORITY[\"EPSG\",\"8901\"]],\n    UNIT[\"degree\",0.01745329251994328,\n        AUTHORITY[\"EPSG\",\"9122\"]],\n    AUTHORITY[\"EPSG\",\"4326\"]]\"\"\"\nnew_cs = osr.SpatialReference()\nnew_cs .ImportFromWkt(wgs84_wkt)\n\n# create a transform object to convert between coordinate systems\ntransform = osr.CoordinateTransformation(old_cs,new_cs) \n\n#get the point to transform, pixel (0,0) in this case\nwidth = ds.RasterXSize\nheight = ds.RasterYSize\ngt = ds.GetGeoTransform()\n\nminx = gt[0]\nmaxx = gt[0] + width*gt[1] + height*gt[2]\nminy = gt[3] + width*gt[4] + height*gt[5]\nmaxy = gt[3]\n\n#get the coordinates in lat long\nlatlong = transform.TransformPoint(minx,miny)\nlatlong2 = transform.TransformPoint(maxx,maxy)\n\n#write coordinates to file\ntextoutput.write(str(latlong[1]))\ntextoutput.write(\"\\n\")\ntextoutput.write(str(latlong[0]))\ntextoutput.write(\"\\n\")\ntextoutput.write(str(latlong2[1]))\ntextoutput.write(\"\\n\")\ntextoutput.write(str(latlong2[0]))\ntextoutput.write(\"\\n\")\n\n#creates color mapping file used by the gdaldem program\ncolor = open(\"color\", \"w\")\ncolor.write(\"0% 0 0 0\\n100% 255 255 255\\n\")\ncolor.close()\n\n#bash commands to call gdaldem, which generates the PNG file\nos.system(\"gdaldem color-relief \" + inputfilename + \" color \"+basefilename+\".png -of png\")\n\n#delete temporary files created by gdaldem\nos.system(\"rm \" + basefilename + \".png.aux.xml\")\nos.system(\"rm color\")\n</pre> from osgeo import osr, gdal import os, sys  #check for correct number of arguments  inputfilename = sys.argv[1] basefilename = sys.argv[1].split(\".\")[0] textoutput = open(basefilename+\".latlng\", \"w\")  ds = gdal.Open(inputfilename)  # get the existing coordinate system old_cs = osr.SpatialReference() old_cs.ImportFromWkt(ds.GetProjectionRef())  # create the new coordinate system, # wgs84 AKA latitude/longitude which Google Maps requires wgs84_wkt = \"\"\" GEOGCS[\"WGS 84\",     DATUM[\"WGS_1984\",         SPHEROID[\"WGS 84\",6378137,298.257223563,             AUTHORITY[\"EPSG\",\"7030\"]],         AUTHORITY[\"EPSG\",\"6326\"]],     PRIMEM[\"Greenwich\",0,         AUTHORITY[\"EPSG\",\"8901\"]],     UNIT[\"degree\",0.01745329251994328,         AUTHORITY[\"EPSG\",\"9122\"]],     AUTHORITY[\"EPSG\",\"4326\"]]\"\"\" new_cs = osr.SpatialReference() new_cs .ImportFromWkt(wgs84_wkt)  # create a transform object to convert between coordinate systems transform = osr.CoordinateTransformation(old_cs,new_cs)   #get the point to transform, pixel (0,0) in this case width = ds.RasterXSize height = ds.RasterYSize gt = ds.GetGeoTransform()  minx = gt[0] maxx = gt[0] + width*gt[1] + height*gt[2] miny = gt[3] + width*gt[4] + height*gt[5] maxy = gt[3]  #get the coordinates in lat long latlong = transform.TransformPoint(minx,miny) latlong2 = transform.TransformPoint(maxx,maxy)  #write coordinates to file textoutput.write(str(latlong[1])) textoutput.write(\"\\n\") textoutput.write(str(latlong[0])) textoutput.write(\"\\n\") textoutput.write(str(latlong2[1])) textoutput.write(\"\\n\") textoutput.write(str(latlong2[0])) textoutput.write(\"\\n\")  #creates color mapping file used by the gdaldem program color = open(\"color\", \"w\") color.write(\"0% 0 0 0\\n100% 255 255 255\\n\") color.close()  #bash commands to call gdaldem, which generates the PNG file os.system(\"gdaldem color-relief \" + inputfilename + \" color \"+basefilename+\".png -of png\")  #delete temporary files created by gdaldem os.system(\"rm \" + basefilename + \".png.aux.xml\") os.system(\"rm color\") <pre>\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\nCell In[3], line 1\n----&gt; 1 from osgeo import osr, gdal\n      2 import os, sys\n      4 #check for correct number of arguments\n\nModuleNotFoundError: No module named 'osgeo'</pre>"},{"location":"examples/test2/","title":"Test2","text":"In\u00a0[1]: Copied! <pre>import rasterarea\n</pre> import rasterarea In\u00a0[2]: Copied! <pre>m = rasterarea.Map()\nm\n</pre> m = rasterarea.Map() m <p>To authorize access needed by Earth Engine, open the following         URL in a web browser and follow the instructions:</p> <p>https://code.earthengine.google.com/client-auth?scopes=https%3A//www.googleapis.com/auth/earthengine%20https%3A//www.googleapis.com/auth/devstorage.full_control&amp;request_id=fka2vDvdHJvUyhMkwTyxNOQJDNOb0vquMrjsg5gfvBc&amp;tc=YEvim8naWj3lCpUXokSmyu_mBDKq6o8eM7O6w_PjzTc&amp;cc=Y3MvR8GQhQcimwskahf9i6kg8S63_CjBfSKTtbrFoGQ</p> <p>The authorization workflow will generate a code, which you should paste in the box below.</p> <pre>\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nFile ~/.local/lib/python3.9/site-packages/ee/data.py:228, in get_persistent_credentials()\n    227 try:\n--&gt; 228   return Credentials(None, **oauth.get_credentials_arguments())\n    229 except IOError:\n\nFile ~/.local/lib/python3.9/site-packages/ee/oauth.py:72, in get_credentials_arguments()\n     71 def get_credentials_arguments():\n---&gt; 72   with open(get_credentials_path()) as creds:\n     73     stored = json.load(creds)\n\nFileNotFoundError: [Errno 2] No such file or directory: '/home/runner/.config/earthengine/credentials'\n\nDuring handling of the above exception, another exception occurred:\n\nEEException                               Traceback (most recent call last)\nFile ~/.local/lib/python3.9/site-packages/geemap/common.py:225, in ee_initialize(token_name, auth_mode, service_account)\n    223                 copy_credentials_to_drive()\n--&gt; 225     ee.Initialize(http_transport=httplib2.Http())\n    226 except Exception:\n\nFile ~/.local/lib/python3.9/site-packages/ee/__init__.py:130, in Initialize(credentials, opt_url, cloud_api_key, http_transport, project)\n    129 if credentials == 'persistent':\n--&gt; 130   credentials = data.get_persistent_credentials()\n    131 data.initialize(\n    132     credentials=credentials,\n    133     api_base_url=(opt_url + '/api' if opt_url else None),\n   (...)\n    137     project=project,\n    138     http_transport=http_transport)\n\nFile ~/.local/lib/python3.9/site-packages/ee/data.py:230, in get_persistent_credentials()\n    229 except IOError:\n--&gt; 230   raise ee_exception.EEException(\n    231       'Please authorize access to your Earth Engine account by '\n    232       'running\\n\\nearthengine authenticate\\n\\n'\n    233       'in your command line, and then retry.')\n\nEEException: Please authorize access to your Earth Engine account by running\n\nearthengine authenticate\n\nin your command line, and then retry.\n\nDuring handling of the above exception, another exception occurred:\n\nStdinNotImplementedError                  Traceback (most recent call last)\nCell In[2], line 1\n----&gt; 1 m = rasterarea.Map()\n      2 m\n\nFile ~/.local/lib/python3.9/site-packages/rasterarea/rasterarea.py:573, in Map.__init__(self, center, zoom, **kwargs)\n    570 if \"scroll_wheel_zoom\" not in kwargs:\n    571     kwargs[\"scroll_wheel_zoom\"] = True\n--&gt; 573 super().__init__(center=center, zoom=zoom, **kwargs)\n    574 self.toolbar = Toolbar(parent=self)\n\nFile ~/.local/lib/python3.9/site-packages/geemap/geemap.py:52, in Map.__init__(self, **kwargs)\n     49     kwargs[\"ee_initialize\"] = True\n     51 if kwargs[\"ee_initialize\"]:\n---&gt; 52     ee_initialize()\n     54 # Default map center location (lat, lon) and zoom level\n     55 latlon = [20, 0]\n\nFile ~/.local/lib/python3.9/site-packages/geemap/common.py:227, in ee_initialize(token_name, auth_mode, service_account)\n    225     ee.Initialize(http_transport=httplib2.Http())\n    226 except Exception:\n--&gt; 227     ee.Authenticate(auth_mode=auth_mode)\n    228     ee.Initialize(http_transport=httplib2.Http())\n\nFile ~/.local/lib/python3.9/site-packages/ee/__init__.py:103, in Authenticate(authorization_code, quiet, code_verifier, auth_mode, scopes)\n     77 def Authenticate(\n     78     authorization_code=None,\n     79     quiet=None,\n     80     code_verifier=None,\n     81     auth_mode=None,\n     82     scopes=None):\n     83 \"\"\"Prompts the user to authorize access to Earth Engine via OAuth2.\n     84 \n     85   Args:\n   (...)\n    101      (auth_url, code_verifier) when called with quiet='init_only'\n    102   \"\"\"\n--&gt; 103   return oauth.authenticate(authorization_code, quiet, code_verifier, auth_mode,\n    104 scopes)\n\nFile ~/.local/lib/python3.9/site-packages/ee/oauth.py:408, in authenticate(cli_authorization_code, quiet, cli_code_verifier, auth_mode, scopes)\n    405 if flow.display_instructions(quiet):\n    406   _open_new_browser(flow.auth_url)\n--&gt; 408 flow.save_code()\n\nFile ~/.local/lib/python3.9/site-packages/ee/oauth.py:451, in Flow.save_code(self, code)\n    449   redirect_uri = self.server.url\n    450   code = self.server.fetch_code()  # Waits for oauth callback\n--&gt; 451 _obtain_and_write_token(code, self.code_verifier, self.scopes, redirect_uri)\n\nFile ~/.local/lib/python3.9/site-packages/ee/oauth.py:179, in _obtain_and_write_token(auth_code, code_verifier, scopes, redirect_uri)\n    177   client_info['redirect_uri'] = redirect_uri\n    178 if not auth_code:\n--&gt; 179   auth_code = input('Enter verification code: ')\n    180 assert isinstance(auth_code, str)\n    181 scopes = scopes or SCOPES\n\nFile ~/.local/lib/python3.9/site-packages/ipykernel/kernelbase.py:1190, in Kernel.raw_input(self, prompt)\n   1188 if not self._allow_stdin:\n   1189     msg = \"raw_input was called, but this frontend does not support input requests.\"\n-&gt; 1190     raise StdinNotImplementedError(msg)\n   1191 return self._input_request(\n   1192     str(prompt),\n   1193     self._parent_ident[\"shell\"],\n   1194     self.get_parent(\"shell\"),\n   1195     password=False,\n   1196 )\n\nStdinNotImplementedError: raw_input was called, but this frontend does not support input requests.</pre>"},{"location":"examples/test3/","title":"Test3","text":"In\u00a0[1]: Copied! <pre>import rasterarea\nimport ipyleaflet\n</pre> import rasterarea import ipyleaflet In\u00a0[2]: Copied! <pre># read tiff file, create a point cloud array of the tiff file, with the first column is the center longitudes,\n# the second column is the center latitudes, the third column is the pixel values.\ndata = rasterarea.point_cloud_arrary('data/grace_tif/GRD-3_2018152-2018181_GRFO_UTCSR_BA01_0600_LND_v04.tif')\n</pre> # read tiff file, create a point cloud array of the tiff file, with the first column is the center longitudes, # the second column is the center latitudes, the third column is the pixel values. data = rasterarea.point_cloud_arrary('data/grace_tif/GRD-3_2018152-2018181_GRFO_UTCSR_BA01_0600_LND_v04.tif') In\u00a0[3]: Copied! <pre># caculate the pixel area array of the tiff file\n# input: point cloud array\n# output: pixel area array\n# 0: center longitudes 1: center latitudes 2:pixel areas\nraster_area = rasterarea.pixel_area_array(point_cloud_arrary=data,pixel_size=1,coordinatesp='WGS84')\n</pre> # caculate the pixel area array of the tiff file # input: point cloud array # output: pixel area array # 0: center longitudes 1: center latitudes 2:pixel areas raster_area = rasterarea.pixel_area_array(point_cloud_arrary=data,pixel_size=1,coordinatesp='WGS84')  In\u00a0[4]: Copied! <pre>nodata = rasterarea.get_geotiff_nodata('data/grace_tif/GRD-3_2018152-2018181_GRFO_UTCSR_BA01_0600_LND_v04.tif')\n</pre> nodata = rasterarea.get_geotiff_nodata('data/grace_tif/GRD-3_2018152-2018181_GRFO_UTCSR_BA01_0600_LND_v04.tif') In\u00a0[5]: Copied! <pre>from rasterarea import ipyleafletmap\n</pre> from rasterarea import ipyleafletmap In\u00a0[6]: Copied! <pre>m = ipyleafletmap.Map(center=(40.7128, -74.0060), zoom=10)\nm\n</pre> m = ipyleafletmap.Map(center=(40.7128, -74.0060), zoom=10) m Out[6]: In\u00a0[7]: Copied! <pre>import rasterio as rio\nfrom rasterio.plot import show\n</pre> import rasterio as rio from rasterio.plot import show In\u00a0[8]: Copied! <pre>img = \"data/grace_tif/GRD-3_2018152-2018181_GRFO_UTCSR_BA01_0600_LND_v04.tif\"\n\nshow(rio.open(img))\n</pre> img = \"data/grace_tif/GRD-3_2018152-2018181_GRFO_UTCSR_BA01_0600_LND_v04.tif\"  show(rio.open(img)) Out[8]: <pre>&lt;Axes: &gt;</pre> In\u00a0[9]: Copied! <pre>m = ipyleaflet.Map(center=(40.7128, -74.0060), zoom=10)\nm\n</pre> m = ipyleaflet.Map(center=(40.7128, -74.0060), zoom=10) m Out[9]: In\u00a0[10]: Copied! <pre>image = ipyleaflet.ImageOverlay(url=\"data/grace_tif/GRD-3_2018152-2018181_GRFO_UTCSR_BA01_0600_LND_v04.tif\",bounds=((40, -40), (40, -40)))\n\nm.add_layer(image)\n</pre> image = ipyleaflet.ImageOverlay(url=\"data/grace_tif/GRD-3_2018152-2018181_GRFO_UTCSR_BA01_0600_LND_v04.tif\",bounds=((40, -40), (40, -40)))  m.add_layer(image) In\u00a0[11]: Copied! <pre>m.layers\n</pre> m.layers Out[11]: <pre>(TileLayer(attribution='&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors', base=True, max_zoom=19, min_zoom=1, name='OpenStreetMap.Mapnik', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'),\n ImageOverlay(bounds=[(40, -40), (40, -40)], options=['attribution'], url='data/grace_tif/GRD-3_2018152-2018181_GRFO_UTCSR_BA01_0600_LND_v04.tif'))</pre> In\u00a0[12]: Copied! <pre>import geemap\nm = geemap.Map()\nm.add_local_tile('data/grace_tif/GRD-3_2018152-2018181_GRFO_UTCSR_BA01_0600_LND_v04.tif', palette='viridis', layer_name=\"GRACE\")\nm\n</pre> import geemap m = geemap.Map() m.add_local_tile('data/grace_tif/GRD-3_2018152-2018181_GRFO_UTCSR_BA01_0600_LND_v04.tif', palette='viridis', layer_name=\"GRACE\") m <p>To authorize access needed by Earth Engine, open the following         URL in a web browser and follow the instructions:</p> <p>https://code.earthengine.google.com/client-auth?scopes=https%3A//www.googleapis.com/auth/earthengine%20https%3A//www.googleapis.com/auth/devstorage.full_control&amp;request_id=2e7SNAQJrJ3y-O3a8ptg6cOlVro2Sj0YeqPIqC0jX-k&amp;tc=VzFngwtkzsbxl9LhvmNHGJBQpTWE6bXvtGKlly3nsWw&amp;cc=igg5gowi1dh9B4PMzIeclebBa27vrzyhTUyMZIjkq10</p> <p>The authorization workflow will generate a code, which you should paste in the box below.</p> <pre>\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nFile ~/.local/lib/python3.9/site-packages/ee/data.py:228, in get_persistent_credentials()\n    227 try:\n--&gt; 228   return Credentials(None, **oauth.get_credentials_arguments())\n    229 except IOError:\n\nFile ~/.local/lib/python3.9/site-packages/ee/oauth.py:72, in get_credentials_arguments()\n     71 def get_credentials_arguments():\n---&gt; 72   with open(get_credentials_path()) as creds:\n     73     stored = json.load(creds)\n\nFileNotFoundError: [Errno 2] No such file or directory: '/home/runner/.config/earthengine/credentials'\n\nDuring handling of the above exception, another exception occurred:\n\nEEException                               Traceback (most recent call last)\nFile ~/.local/lib/python3.9/site-packages/geemap/common.py:225, in ee_initialize(token_name, auth_mode, service_account)\n    223                 copy_credentials_to_drive()\n--&gt; 225     ee.Initialize(http_transport=httplib2.Http())\n    226 except Exception:\n\nFile ~/.local/lib/python3.9/site-packages/ee/__init__.py:130, in Initialize(credentials, opt_url, cloud_api_key, http_transport, project)\n    129 if credentials == 'persistent':\n--&gt; 130   credentials = data.get_persistent_credentials()\n    131 data.initialize(\n    132     credentials=credentials,\n    133     api_base_url=(opt_url + '/api' if opt_url else None),\n   (...)\n    137     project=project,\n    138     http_transport=http_transport)\n\nFile ~/.local/lib/python3.9/site-packages/ee/data.py:230, in get_persistent_credentials()\n    229 except IOError:\n--&gt; 230   raise ee_exception.EEException(\n    231       'Please authorize access to your Earth Engine account by '\n    232       'running\\n\\nearthengine authenticate\\n\\n'\n    233       'in your command line, and then retry.')\n\nEEException: Please authorize access to your Earth Engine account by running\n\nearthengine authenticate\n\nin your command line, and then retry.\n\nDuring handling of the above exception, another exception occurred:\n\nStdinNotImplementedError                  Traceback (most recent call last)\nCell In[12], line 2\n      1 import geemap\n----&gt; 2 m = geemap.Map()\n      3 m.add_local_tile('data/grace_tif/GRD-3_2018152-2018181_GRFO_UTCSR_BA01_0600_LND_v04.tif', palette='viridis', layer_name=\"GRACE\")\n      4 m\n\nFile ~/.local/lib/python3.9/site-packages/geemap/geemap.py:52, in Map.__init__(self, **kwargs)\n     49     kwargs[\"ee_initialize\"] = True\n     51 if kwargs[\"ee_initialize\"]:\n---&gt; 52     ee_initialize()\n     54 # Default map center location (lat, lon) and zoom level\n     55 latlon = [20, 0]\n\nFile ~/.local/lib/python3.9/site-packages/geemap/common.py:227, in ee_initialize(token_name, auth_mode, service_account)\n    225     ee.Initialize(http_transport=httplib2.Http())\n    226 except Exception:\n--&gt; 227     ee.Authenticate(auth_mode=auth_mode)\n    228     ee.Initialize(http_transport=httplib2.Http())\n\nFile ~/.local/lib/python3.9/site-packages/ee/__init__.py:103, in Authenticate(authorization_code, quiet, code_verifier, auth_mode, scopes)\n     77 def Authenticate(\n     78     authorization_code=None,\n     79     quiet=None,\n     80     code_verifier=None,\n     81     auth_mode=None,\n     82     scopes=None):\n     83 \"\"\"Prompts the user to authorize access to Earth Engine via OAuth2.\n     84 \n     85   Args:\n   (...)\n    101      (auth_url, code_verifier) when called with quiet='init_only'\n    102   \"\"\"\n--&gt; 103   return oauth.authenticate(authorization_code, quiet, code_verifier, auth_mode,\n    104 scopes)\n\nFile ~/.local/lib/python3.9/site-packages/ee/oauth.py:408, in authenticate(cli_authorization_code, quiet, cli_code_verifier, auth_mode, scopes)\n    405 if flow.display_instructions(quiet):\n    406   _open_new_browser(flow.auth_url)\n--&gt; 408 flow.save_code()\n\nFile ~/.local/lib/python3.9/site-packages/ee/oauth.py:451, in Flow.save_code(self, code)\n    449   redirect_uri = self.server.url\n    450   code = self.server.fetch_code()  # Waits for oauth callback\n--&gt; 451 _obtain_and_write_token(code, self.code_verifier, self.scopes, redirect_uri)\n\nFile ~/.local/lib/python3.9/site-packages/ee/oauth.py:179, in _obtain_and_write_token(auth_code, code_verifier, scopes, redirect_uri)\n    177   client_info['redirect_uri'] = redirect_uri\n    178 if not auth_code:\n--&gt; 179   auth_code = input('Enter verification code: ')\n    180 assert isinstance(auth_code, str)\n    181 scopes = scopes or SCOPES\n\nFile ~/.local/lib/python3.9/site-packages/ipykernel/kernelbase.py:1190, in Kernel.raw_input(self, prompt)\n   1188 if not self._allow_stdin:\n   1189     msg = \"raw_input was called, but this frontend does not support input requests.\"\n-&gt; 1190     raise StdinNotImplementedError(msg)\n   1191 return self._input_request(\n   1192     str(prompt),\n   1193     self._parent_ident[\"shell\"],\n   1194     self.get_parent(\"shell\"),\n   1195     password=False,\n   1196 )\n\nStdinNotImplementedError: raw_input was called, but this frontend does not support input requests.</pre>"},{"location":"examples/test4/","title":"Test4","text":"In\u00a0[1]: Copied! <pre>import folium\n</pre> import folium In\u00a0[2]: Copied! <pre>m = folium.Map(location=[48, -100], zoom_start=4)\nm\n</pre> m = folium.Map(location=[48, -100], zoom_start=4) m Out[2]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[3]: Copied! <pre>import rasterarea.folium as rasterarea\n</pre> import rasterarea.folium as rasterarea <pre>\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\nCell In[3], line 1\n----&gt; 1 import rasterarea.folium as rasterarea\n\nModuleNotFoundError: No module named 'rasterarea.folium'</pre> In\u00a0[4]: Copied! <pre>m =rasterarea.Map(location=[48, -100], zoom_start=4)\nm.add_tile_layer()\nm\n</pre> m =rasterarea.Map(location=[48, -100], zoom_start=4) m.add_tile_layer() m <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[4], line 1\n----&gt; 1 m =rasterarea.Map(location=[48, -100], zoom_start=4)\n      2 m.add_tile_layer()\n      3 m\n\nNameError: name 'rasterarea' is not defined</pre> In\u00a0[5]: Copied! <pre>import leafmap\nurl = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n</pre> import leafmap url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}' <pre>\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\nCell In[5], line 1\n----&gt; 1 import leafmap\n      2 url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n\nModuleNotFoundError: No module named 'leafmap'</pre> In\u00a0[6]: Copied! <pre>m = leafmap.Map()\nm.add_tile_layer(url=url, name = 'basemap',attribution='Google')\nm\n</pre> m = leafmap.Map() m.add_tile_layer(url=url, name = 'basemap',attribution='Google') m <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[6], line 1\n----&gt; 1 m = leafmap.Map()\n      2 m.add_tile_layer(url=url, name = 'basemap',attribution='Google')\n      3 m\n\nNameError: name 'leafmap' is not defined</pre> In\u00a0[7]: Copied! <pre>m.layers[1].interact()\n</pre> m.layers[1].interact() <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[7], line 1\n----&gt; 1 m.layers[1].interact()\n\nAttributeError: 'Map' object has no attribute 'layers'</pre> In\u00a0[8]: Copied! <pre>from ipyleaflet import WidgetControl\nimport ipywidgets as widgets\n</pre> from ipyleaflet import WidgetControl import ipywidgets as widgets In\u00a0[9]: Copied! <pre>slider = widgets.FloatSlider(min=0,max=1,value=0.1)\nslider\n</pre> slider = widgets.FloatSlider(min=0,max=1,value=0.1) slider Out[9]: In\u00a0[10]: Copied! <pre>widgets.jslink((m.layers[1], 'opacity'), (slider, 'value'))\n</pre> widgets.jslink((m.layers[1], 'opacity'), (slider, 'value')) <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[10], line 1\n----&gt; 1 widgets.jslink((m.layers[1], 'opacity'), (slider, 'value'))\n\nAttributeError: 'Map' object has no attribute 'layers'</pre> In\u00a0[11]: Copied! <pre>contral = WidgetControl(widget=slider, position='bottomright')\n</pre> contral = WidgetControl(widget=slider, position='bottomright') In\u00a0[12]: Copied! <pre>m.add(contral)\n</pre> m.add(contral) <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[12], line 1\n----&gt; 1 m.add(contral)\n\nAttributeError: 'Map' object has no attribute 'add'</pre> In\u00a0[13]: Copied! <pre>import geosdemo\nimport ipyleaflet\n</pre> import geosdemo import ipyleaflet <pre>\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\nCell In[13], line 1\n----&gt; 1 import geosdemo\n      2 import ipyleaflet\n\nModuleNotFoundError: No module named 'geosdemo'</pre> In\u00a0[14]: Copied! <pre>wiget = widgets.HTML(value = 'https://static.wikia.nocookie.net/familyguyfanon/images/8/88/Chip_Griffin_1.png/revision/latest/scale-to-width-down/1000?cb=20211116205910')\nwiget\n</pre> wiget = widgets.HTML(value = 'https://static.wikia.nocookie.net/familyguyfanon/images/8/88/Chip_Griffin_1.png/revision/latest/scale-to-width-down/1000?cb=20211116205910') wiget Out[14]: In\u00a0[15]: Copied! <pre>m = ipyleaflet.Map( center=(0, 0), zoom=2)\nm\n</pre> m = ipyleaflet.Map( center=(0, 0), zoom=2) m <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[15], line 1\n----&gt; 1 m = ipyleaflet.Map( center=(0, 0), zoom=2)\n      2 m\n\nNameError: name 'ipyleaflet' is not defined</pre> In\u00a0[16]: Copied! <pre>html = \"\"\"\n&lt;html&gt;\n\n\"\"\"\n</pre> html = \"\"\"   \"\"\""},{"location":"examples/toolbar/","title":"Toolbar","text":"In\u00a0[1]: Copied! <pre>import ipywidgets as widgets\nfrom ipyleaflet import WidgetControl\n</pre> import ipywidgets as widgets from ipyleaflet import WidgetControl In\u00a0[2]: Copied! <pre>widget_width = \"250px\"\npadding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\ntoolbar_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Toolbar\",\n    icon=\"wrench\",\n    layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n)\n\nclose_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Close the tool\",\n    icon=\"times\",\n    button_style=\"primary\",\n    layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n)\n</pre> widget_width = \"250px\" padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left  toolbar_button = widgets.ToggleButton(     value=False,     tooltip=\"Toolbar\",     icon=\"wrench\",     layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding), )  close_button = widgets.ToggleButton(     value=False,     tooltip=\"Close the tool\",     icon=\"times\",     button_style=\"primary\",     layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding), ) In\u00a0[3]: Copied! <pre>toolbar = widgets.HBox([toolbar_button])\ntoolbar\n</pre> toolbar = widgets.HBox([toolbar_button]) toolbar Out[3]: In\u00a0[4]: Copied! <pre>def toolbar_click(change):\n    if change[\"new\"]:\n        toolbar.children = [toolbar_button, close_button]\n    else:\n        toolbar.children = [toolbar_button]\n        \ntoolbar_button.observe(toolbar_click, \"value\")\n</pre> def toolbar_click(change):     if change[\"new\"]:         toolbar.children = [toolbar_button, close_button]     else:         toolbar.children = [toolbar_button]          toolbar_button.observe(toolbar_click, \"value\") In\u00a0[5]: Copied! <pre>def close_click(change):\n    if change[\"new\"]:\n        toolbar_button.close()\n        close_button.close()\n        toolbar.close()\n        \nclose_button.observe(close_click, \"value\")\ntoolbar\n</pre> def close_click(change):     if change[\"new\"]:         toolbar_button.close()         close_button.close()         toolbar.close()          close_button.observe(close_click, \"value\") toolbar Out[5]: In\u00a0[6]: Copied! <pre>rows = 2\ncols = 2\ngrid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\"))\n</pre> rows = 2 cols = 2 grid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\")) <p>icons: https://fontawesome.com/v4.7.0/icons/</p> In\u00a0[7]: Copied! <pre>icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\nfor i in range(rows):\n    for j in range(cols):\n        grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j], \n                                    layout=widgets.Layout(width=\"28px\", padding=\"0px\"))\ngrid\n</pre> icons = [\"folder-open\", \"map\", \"info\", \"question\"]  for i in range(rows):     for j in range(cols):         grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j],                                      layout=widgets.Layout(width=\"28px\", padding=\"0px\")) grid Out[7]: In\u00a0[8]: Copied! <pre>toolbar = widgets.VBox([toolbar_button])\n</pre> toolbar = widgets.VBox([toolbar_button]) In\u00a0[9]: Copied! <pre>def toolbar_click(change):\n    if change[\"new\"]:\n        toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n    else:\n        toolbar.children = [toolbar_button]\n        \ntoolbar_button.observe(toolbar_click, \"value\")\ntoolbar\n</pre> def toolbar_click(change):     if change[\"new\"]:         toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]     else:         toolbar.children = [toolbar_button]          toolbar_button.observe(toolbar_click, \"value\") toolbar Out[9]: In\u00a0[10]: Copied! <pre>toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\")\n</pre> toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\") In\u00a0[11]: Copied! <pre>m = geosdemo.Map()\nm.add_control(toolbar_ctrl)\nm\n</pre> m = geosdemo.Map() m.add_control(toolbar_ctrl) m <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[11], line 1\n----&gt; 1 m = geosdemo.Map()\n      2 m.add_control(toolbar_ctrl)\n      3 m\n\nNameError: name 'geosdemo' is not defined</pre> In\u00a0[12]: Copied! <pre>output = widgets.Output()\noutput_ctrl = WidgetControl(widget=output, position=\"bottomright\")\nm.add_control(output_ctrl)\n</pre> output = widgets.Output() output_ctrl = WidgetControl(widget=output, position=\"bottomright\") m.add_control(output_ctrl) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[12], line 3\n      1 output = widgets.Output()\n      2 output_ctrl = WidgetControl(widget=output, position=\"bottomright\")\n----&gt; 3 m.add_control(output_ctrl)\n\nNameError: name 'm' is not defined</pre> In\u00a0[13]: Copied! <pre>m.layers\n</pre> m.layers <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[13], line 1\n----&gt; 1 m.layers\n\nNameError: name 'm' is not defined</pre> In\u00a0[14]: Copied! <pre>def tool_click(b):    \n    with output:\n        output.clear_output()\n        print(f\"You clicked the {b.icon} button\")\n</pre> def tool_click(b):         with output:         output.clear_output()         print(f\"You clicked the {b.icon} button\") In\u00a0[15]: Copied! <pre>for i in range(rows):\n    for j in range(cols):\n        tool = grid[i, j]\n        tool.on_click(tool_click)\n</pre> for i in range(rows):     for j in range(cols):         tool = grid[i, j]         tool.on_click(tool_click) In\u00a0[16]: Copied! <pre>with output:\n    output.clear_output()\n    print(\"Click on a button to see the output\")\n</pre> with output:     output.clear_output()     print(\"Click on a button to see the output\") In\u00a0[17]: Copied! <pre>basemap = widgets.Dropdown(\n    options=[\"OpenStreetMap\", \"SATELLITE\"],\n    value=None,\n    description=\"Basemap:\",\n    style={\"description_width\": \"initial\"},\n    layout=widgets.Layout(width=\"200px\"),\n)\n\nbasemap\n</pre> basemap = widgets.Dropdown(     options=[\"OpenStreetMap\", \"SATELLITE\"],     value=None,     description=\"Basemap:\",     style={\"description_width\": \"initial\"},     layout=widgets.Layout(width=\"200px\"), )  basemap Out[17]: In\u00a0[18]: Copied! <pre>basemap.value\n</pre> basemap.value In\u00a0[19]: Copied! <pre>basemap_ctrl = WidgetControl(widget=basemap, position=\"topright\")\n</pre> basemap_ctrl = WidgetControl(widget=basemap, position=\"topright\") In\u00a0[20]: Copied! <pre>def tool_click(b):    \n    with output:\n        output.clear_output()\n        print(f\"You clicked the {b.icon} button\")\n\n        if b.icon == \"folder-open\":\n            m.add_control(basemap_ctrl)\n</pre> def tool_click(b):         with output:         output.clear_output()         print(f\"You clicked the {b.icon} button\")          if b.icon == \"folder-open\":             m.add_control(basemap_ctrl) In\u00a0[21]: Copied! <pre>for i in range(rows):\n    for j in range(cols):\n        tool = grid[i, j]\n        tool.on_click(tool_click)\n</pre> for i in range(rows):     for j in range(cols):         tool = grid[i, j]         tool.on_click(tool_click) In\u00a0[22]: Copied! <pre>def change_basemap(change):\n    if change[\"new\"]:\n        m.add_basemap = basemap.value\n\nm.observe(change_basemap, \"value\")\n</pre> def change_basemap(change):     if change[\"new\"]:         m.add_basemap = basemap.value  m.observe(change_basemap, \"value\") <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[22], line 5\n      2     if change[\"new\"]:\n      3         m.add_basemap = basemap.value\n----&gt; 5 m.observe(change_basemap, \"value\")\n\nNameError: name 'm' is not defined</pre> In\u00a0[23]: Copied! <pre>change_basemap\n</pre> change_basemap Out[23]: <pre>&lt;function __main__.change_basemap(change)&gt;</pre> <p></p>"},{"location":"examples/toolbar/#creating-a-toolbar-button","title":"Creating a toolbar button\u00b6","text":""},{"location":"examples/toolbar/#adding-toolbar-event","title":"Adding toolbar event\u00b6","text":""},{"location":"examples/toolbar/#adding-toolbar-grid","title":"Adding toolbar grid\u00b6","text":""},{"location":"examples/toolbar/#adding-toolbar-to-ipyleaflet","title":"Adding toolbar to ipyleaflet\u00b6","text":""},{"location":"examples/toolbar_test/","title":"Toolbar test","text":"In\u00a0[1]: Copied! <pre># conda install -c conda-forge cartopy\nimport math\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport ipywidgets as widgets\nfrom ipyfilechooser import FileChooser\nimport netCDF4 as nc\nimport os\nfrom ipywidgets import TwoByTwoLayout\nimport traitlets\nfrom IPython.display import display\nfrom tkinter import Tk, filedialog\nfrom cartopy import config\nimport cartopy.crs as ccrs\nimport pyproj\nfrom osgeo import ogr, osr, gdal\n</pre> # conda install -c conda-forge cartopy import math import pandas as pd import numpy as np import matplotlib as mpl import matplotlib.pyplot as plt import ipywidgets as widgets from ipyfilechooser import FileChooser import netCDF4 as nc import os from ipywidgets import TwoByTwoLayout import traitlets from IPython.display import display from tkinter import Tk, filedialog from cartopy import config import cartopy.crs as ccrs import pyproj from osgeo import ogr, osr, gdal <pre>\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\nCell In[1], line 15\n     13 from IPython.display import display\n     14 from tkinter import Tk, filedialog\n---&gt; 15 from cartopy import config\n     16 import cartopy.crs as ccrs\n     17 import pyproj\n\nModuleNotFoundError: No module named 'cartopy'</pre> In\u00a0[2]: Copied! <pre>class SelectFilesButton(widgets.Button):\n\"\"\"A file widget that leverages tkinter.filedialog.\"\"\"\n\n    def __init__(self):\n        super(SelectFilesButton, self).__init__()\n        # Add the selected_files trait\n        self.add_traits(files=traitlets.traitlets.List())\n        # Create the button.\n        self.description = \"Select Files\"\n        self.icon = \"square-o\"\n        # Set on click behavior.\n        self.on_click(self.select_files)\n\n    @staticmethod\n    def select_files(b):\n\"\"\"Generate instance of tkinter.filedialog.\n\n        Parameters\n        ----------\n        b : obj:\n            An instance of ipywidgets.widgets.Button \n        \"\"\"\n        # Create Tk root\n        root = Tk()\n        # Hide the main window\n        root.withdraw()\n        # Raise the root to the top of all windows.\n        root.call('wm', 'attributes', '.', '-topmost', True)\n        # List of selected fileswill be set to b.value\n        b.files = filedialog.askopenfilename(multiple=True)\n\n        b.description = \"Files Selected\"\n        b.icon = \"check-square-o\"\n        b.style.button_color = \"lightgreen\"\n</pre> class SelectFilesButton(widgets.Button):     \"\"\"A file widget that leverages tkinter.filedialog.\"\"\"      def __init__(self):         super(SelectFilesButton, self).__init__()         # Add the selected_files trait         self.add_traits(files=traitlets.traitlets.List())         # Create the button.         self.description = \"Select Files\"         self.icon = \"square-o\"         # Set on click behavior.         self.on_click(self.select_files)      @staticmethod     def select_files(b):         \"\"\"Generate instance of tkinter.filedialog.          Parameters         ----------         b : obj:             An instance of ipywidgets.widgets.Button          \"\"\"         # Create Tk root         root = Tk()         # Hide the main window         root.withdraw()         # Raise the root to the top of all windows.         root.call('wm', 'attributes', '.', '-topmost', True)         # List of selected fileswill be set to b.value         b.files = filedialog.askopenfilename(multiple=True)          b.description = \"Files Selected\"         b.icon = \"check-square-o\"         b.style.button_color = \"lightgreen\" In\u00a0[3]: Copied! <pre>fn = './data/grace_nc/test1.nc'\nds = nc.Dataset(fn)\n</pre> fn = './data/grace_nc/test1.nc' ds = nc.Dataset(fn) In\u00a0[4]: Copied! <pre>print(ds)\n</pre> print(ds) <pre>&lt;class 'netCDF4._netCDF4.Dataset'&gt;\nroot group (NETCDF4_CLASSIC data model, file format HDF5):\n    Conventions: CF-1.6\n    standard_name_vocabulary: NetCDF Climate and Forecast (CF) Metadata Convention\n    title: GRACE-FO Water-Equivalent-Thickness Surface-Mass Anomaly; JPL RL06\n    id: TELND-3NJ64\n    summary: Gridded surface mass anomalies, derived from Spherical harmonic coefficients representing an estimate of Earth's mean gravity field during the specified timespan derived from GRACE mission measurements.  These grids represent the full magnitude of land hydrology and land ice.  Further, they contain atmospheric and oceanic processes not captured in the accompanying GAC product.\n    processing_level: 3\n    product_version_Level3: LND_sw06_k20_G300_GCSAL_v04\n    creator_name: GRACE Science Data System NASA/JPL\n    creator_email: grace@jpl.nasa.gov\n    creator_url: https://www.grace.jpl.nasa.gov\n    date_created: 2021-04-28T09:58:11\n    date_issued: 2021-04-27T17:48:31\n    acknowledgement: GRACE is a joint mission of NASA (USA) and DLR (Germany).  Use the digital object identifier provided in the id attribute when citing this data.  See https://podaac.jpl.nasa.gov/CitingPODAAC\n    license: https://science.nasa.gov/earth-science/earth-science-data/data-information-policy\n    product_version: RL06\n    time_epoch: 2002-01-01T00:00:00\n    static_field_time_epoch: 2008-01-01T12:00:00\n    time_mean_removed: 2005-01-01 to 2010-12-31\n    filter_type: Gauss 300 km\n    postprocess_1: Water density used to convert to equivalent water height: 1000 kg/m^3\n    postprocess_2: Background model added back: \n    postprocess_3: Decorrelation ('de-stripe') filter: [Swenson &amp; Wahr, 2006, doi:10.1029/2005GL025285]\n    postprocess_4: Ellipsoidal Correction has been applied [Ghobadi-Far et al., 2019; https://doi.org/10.1093/gji/ggz292]\n    GIA_removed: Peltier (Ice-6G_D (updated; 06/2017!))\n    geocenter_correction: Corrected; after [Sun et al., 2016, doi:10.1002/2016JB013073.]\n    C_20_substitution: [Loomis et al., 2019, Geophys. Res. Lett., doi:10.1029/2019GL082929]\n    journal_reference: [Landerer F.W. and S. C. Swenson, Accuracy of scaled GRACE terrestrial water storage estimates. Water Resources Research, Vol 48, W04531, 11 PP, doi:10.1029/2011WR011453, 2012.]\n    project: NASA Gravity Recovery And Climate Experiment (GRACE)\n    program: NASA Earth Science System Pathfinder\n    keywords: Surface Mass, Mass Transport, Terrestrial Water Storage, Mass Balance, Gravity Anomaly, Sea Level, Ocean Bottom Pressure\n    keywords_vocabulary: NASA Global Change Master Directory (GCMD) Science Keywords\n    institution: NASA/JPL\n    naming_authority: org.doi.dx\n    history: Level-3 processing at JPL with Original solution produced on 2018-05-20T08:38:04\n    source: An inversion using GRACE-A and GRACE-B measurements\n    platform: GRACE-A, GRACE-B\n    platform_vocabulary: NASA Global Change Master Directory platform keywords\n    instrument: GRACE-A ACC, GRACE-A GPS, GRACE-A KBR, GRACE-A SCA, GRACE-B ACC, GRACE-B GPS, GRACE-B KBR, GRACE-B SCA\n    instrument_vocabulary: NASA Global Change Master Directory instrument keywords\n    references: Cooley, Landerer (2019), GRACE/GRACE-FO Level-3 Data Product User Handbook, JPL-D-103133.\n    creator_type: group\n    creator_institution: NASA/JPL\n    publisher_name: Physical Oceanography Distributed Active Archive Center\n    publisher_email: podaac@jpl.nasa.gov\n    publisher_url: https://podaac.jpl.nasa.gov\n    publisher_type: group\n    publisher_institution: NASA/JPL\n    time_coverage_start: 2002-04-04T00:00:00\n    time_coverage_end: 2002-04-30T23:59:59\n    geospatial_lat_min: -89.5\n    geospatial_lat_max: 89.5\n    geospatial_lat_units: degrees_north\n    geospatial_lat_resolution: One degree grid\n    geospatial_lon_min: 0.5\n    geospatial_lon_max: 359.5\n    geospatial_lon_units: degrees_east\n    geospatial_lon_resolution: One degree grid\n    dimensions(sizes): lon(360), lat(180), time(1), bounds(2)\n    variables(dimensions): float64 lon(lon), float64 lat(lat), float64 time(time), float64 lwe_thickness(time, lat, lon), float64 uncertainty(time, lat, lon), float64 lat_bounds(lat, bounds), float64 lon_bounds(lon, bounds), float64 time_bounds(time, bounds)\n    groups: \n</pre> In\u00a0[5]: Copied! <pre>lwe = ds['lwe_thickness']\nprint(lwe)\n</pre> lwe = ds['lwe_thickness'] print(lwe) <pre>&lt;class 'netCDF4._netCDF4.Variable'&gt;\nfloat64 lwe_thickness(time, lat, lon)\n    _FillValue: -99999.0\n    units: m\n    long_name: Liquid_Water_Equivalent_Thickness\n    coordinates: time lat lon\n    grid_mapping: WGS 84\n    valid_min: -30.0\n    valid_max: 30.0\n    comment: none\nunlimited dimensions: time\ncurrent shape = (1, 180, 360)\nfilling on\n</pre> In\u00a0[6]: Copied! <pre>lon = ds['lon']\n</pre> lon = ds['lon'] In\u00a0[7]: Copied! <pre>fig=plt.plot()\nplt.axis('off')\n</pre> fig=plt.plot() plt.axis('off')  Out[7]: <pre>(-0.05500000000000001,\n 0.05500000000000001,\n -0.05500000000000001,\n 0.05500000000000001)</pre> In\u00a0[8]: Copied! <pre>class toolbox(widgets.HBox):\n     \n    def __init__(self):\n        super().__init__()\n        output = widgets.Output()\n        # create figure\n        with output:\n            fig=plt.plot()\n            plt.axis('off')\n        # define widgets\n        fileuploader = FileChooser()\n        layerselector = widgets.Dropdown()\n        plot_button = widgets.Button(description='Plot')\n\n\n                           \n        controls = widgets.VBox([\n            fileuploader,\n            plot_button\n        ])\n\n        app = TwoByTwoLayout(top_left=controls, top_right=output)\n\n        # observe stuff\n        fileuploader.observe(self.update, 'value')\n         \n        # add to children\n        self.children = [controls, output]\n     \n    def update(self, change):\n\"\"\"Draw line in plot\"\"\"\n        self.fig.canvas.draw()\n \n         \n\ntoolbox()\n</pre>  class toolbox(widgets.HBox):           def __init__(self):         super().__init__()         output = widgets.Output()         # create figure         with output:             fig=plt.plot()             plt.axis('off')         # define widgets         fileuploader = FileChooser()         layerselector = widgets.Dropdown()         plot_button = widgets.Button(description='Plot')                                       controls = widgets.VBox([             fileuploader,             plot_button         ])          app = TwoByTwoLayout(top_left=controls, top_right=output)          # observe stuff         fileuploader.observe(self.update, 'value')                   # add to children         self.children = [controls, output]           def update(self, change):         \"\"\"Draw line in plot\"\"\"         self.fig.canvas.draw()              toolbox() Out[8]: In\u00a0[9]: Copied! <pre>class Toolbar:\n    def __init__(self):\n        self.create_widgets()\n        self.setup_interactive_plot()\n        map_output = widgets.Output()\n        plot_output = widgets.Output()\n        self.fileuploader.observe(self.open_file, names='files')\n\n        with map_output:\n            map_output.clear_output()\n            fig=plt.plot()\n            plt.axis('off')\n\n        with plot_output:\n            plot_output.clear_output()\n            fig=plt.plot()\n            plt.axis('off')   \n\n    ## create buttons\n    def create_widgets(self):\n        self.fileuploader = SelectFilesButton()\n        self.plot_button = widgets.Button(description=\"Plot\")\n        self.save_button = widgets.Button(description=\"Save\")\n        self.plot_button.on_click(self.plot)\n        self.save_button.on_click(self.save)\n        self.layerselector = widgets.Dropdown(\n            options=[\"No file uploaded\"],\n            value=None,\n            description=\"Layer:\"\n        )\n    \n    ## define toolbar layout\n    def setup_interactive_plot(self):\n        display(self.fileuploader, self.layerselector, self.plot_button, self.save_button)\n    \n    ## define dropdown uppdate event\n    def update_dropdown(self):\n        self.layerselector.options = self.ds_list\n        self.layerselector.value = self.ds_list[0]\n\n    ## define open file event\n    def open_file(self, event=None):\n        init_ds = self.fileuploader.files[0]\n        if init_ds.endswith(\".nc\"):\n            self.ds = nc.Dataset(path)\n            self.ds_list = self.fileuploader.files\n            self.update_dropdown()\n        elif init_ds.endswith(\".tif\"):\n            self.ds = gdal.Open(path)\n            self.ds_list = self.fileuploader.files\n            self.update_dropdown()\n        else:\n            print(\"File type not supported\")\n        \n    def plot(self, event=None):\n        plt.figure()\n        x = np.linspace(0, 10, 100)\n        y = np.sin(x)\n        plt.plot(x, y)\n        plt.show()\n\n    def save(self, event=None):\n        plt.savefig(f\"test.png\", dpi=600)\n        print(f\"Plot saved as test.png\")\n\n\nToolbar()\n</pre> class Toolbar:     def __init__(self):         self.create_widgets()         self.setup_interactive_plot()         map_output = widgets.Output()         plot_output = widgets.Output()         self.fileuploader.observe(self.open_file, names='files')          with map_output:             map_output.clear_output()             fig=plt.plot()             plt.axis('off')          with plot_output:             plot_output.clear_output()             fig=plt.plot()             plt.axis('off')         ## create buttons     def create_widgets(self):         self.fileuploader = SelectFilesButton()         self.plot_button = widgets.Button(description=\"Plot\")         self.save_button = widgets.Button(description=\"Save\")         self.plot_button.on_click(self.plot)         self.save_button.on_click(self.save)         self.layerselector = widgets.Dropdown(             options=[\"No file uploaded\"],             value=None,             description=\"Layer:\"         )          ## define toolbar layout     def setup_interactive_plot(self):         display(self.fileuploader, self.layerselector, self.plot_button, self.save_button)          ## define dropdown uppdate event     def update_dropdown(self):         self.layerselector.options = self.ds_list         self.layerselector.value = self.ds_list[0]      ## define open file event     def open_file(self, event=None):         init_ds = self.fileuploader.files[0]         if init_ds.endswith(\".nc\"):             self.ds = nc.Dataset(path)             self.ds_list = self.fileuploader.files             self.update_dropdown()         elif init_ds.endswith(\".tif\"):             self.ds = gdal.Open(path)             self.ds_list = self.fileuploader.files             self.update_dropdown()         else:             print(\"File type not supported\")              def plot(self, event=None):         plt.figure()         x = np.linspace(0, 10, 100)         y = np.sin(x)         plt.plot(x, y)         plt.show()      def save(self, event=None):         plt.savefig(f\"test.png\", dpi=600)         print(f\"Plot saved as test.png\")   Toolbar() Out[9]: <pre>&lt;__main__.Toolbar at 0x7f5fb46cbe50&gt;</pre> In\u00a0[10]: Copied! <pre>class SelectFilesButton(widgets.Button):\n\"\"\"A file widget that leverages tkinter.filedialog.\"\"\"\n\n    def __init__(self):\n        super(SelectFilesButton, self).__init__()\n        # Add the selected_files trait\n        self.add_traits(files=traitlets.traitlets.List())\n        # Create the button.\n        self.description = \"Select Files\"\n        self.icon = \"square-o\"\n        # Set on click behavior.\n        self.on_click(self.select_files)\n\n    @staticmethod\n    def select_files(b):\n\"\"\"Generate instance of tkinter.filedialog.\n\n        Parameters\n        ----------\n        b : obj:\n            An instance of ipywidgets.widgets.Button \n        \"\"\"\n        # Create Tk root\n        root = Tk()\n        # Hide the main window\n        root.withdraw()\n        # Raise the root to the top of all windows.\n        root.call('wm', 'attributes', '.', '-topmost', True)\n        # List of selected fileswill be set to b.value\n        b.files = filedialog.askopenfilename(multiple=True)\n\n        b.description = \"Files Selected\"\n        b.icon = \"check-square-o\"\n        b.style.button_color = \"lightgreen\"\n\nclass Toolbar:\n    def __init__(self):\n        self.create_widgets()\n        self.setup_interactive_plot()\n\n        # Observe the changes in the fileuploader.files and call open_file\n        self.fileuploader.observe(self.open_file, names='files')\n\n    ## create buttons\n    def create_widgets(self):\n        self.fileuploader = SelectFilesButton()\n        self.plot_button = widgets.Button(description=\"Plot\")\n        self.save_button = widgets.Button(description=\"Save\")\n        self.plot_button.on_click(self.plot)\n        self.save_button.on_click(self.save)\n        self.layerselector = widgets.Dropdown(\n            options=[\"No file uploaded\"],\n            value=None,\n            description=\"Layer:\"\n        )\n\n    ## define toolbar layout\n    def setup_interactive_plot(self):\n        display(self.fileuploader, self.layerselector, self.plot_button, self.save_button)\n\n    ## define open file event\n    def open_file(self, change):\n        self.ds_list = self.fileuploader.files\n        self.update_dropdown()\n\n    def update_dropdown(self):\n        if len(self.ds_list) &gt; 0:\n            file_names = [os.path.basename(file_path) for file_path in self.ds_list]\n            self.layerselector.options = file_names\n            self.layerselector.value = file_names[0]\n        else:\n            self.layerselector.options = [\"No file uploaded\"]\n            self.layerselector.value = None\n\n    def read_and_plot_file(self, file_path):\n        if file_path.endswith(\".nc\"):\n            ds = nc.Dataset(file_path)\n            lat = ds.variables['lat'][:]\n            lon = ds.variables['lon'][:]\n            var = ds.variables['lwe_thickness'][:]\n            var = var.reshape((len(lat), len(lon)))\n            lons,lats= np.meshgrid(lon,lat)\n            ax = plt.axes(projection=ccrs.PlateCarree())\n\n        elif file_path.endswith(\".tif\"):\n            ds = gdal.Open(file_path)\n            col, row, band = ds.RasterXSize, ds.RasterYSize, ds.RasterCount\n            var = ds.GetRasterBand(1).ReadAsArray()\n            xoff, a, b, yoff, d, e = ds.GetGeoTransform()\n            def pixel2coord(x, y):\n\"\"\"Returns global coordinates from coordinates x,y of the pixel\"\"\"\n             xp = a * x + b * y + xoff\n             yp = d * x + e * y + yoff\n            return(xp, yp)\n            x,y = pixel2coord(col/2,row/2)\n            ax = plt.axes(projection=ccrs.PlateCarree())\n        else:\n            print(\"File type not supported\")\n            return\n        \n\n        plt.contourf(lons, lats, var, 60, transform=ccrs.PlateCarree())\n        plt.colorbar()\n        plt.show()\n\n    def plot(self, event=None):\n        selected_file_name = self.layerselector.value\n        selected_file_index = self.layerselector.options.index(selected_file_name)\n        selected_file_path = self.ds_list[selected_file_index]\n        self.read_and_plot_file(selected_file_path)\n\n    def save(self, event=None):\n        plt.savefig(f\"test.png\", dpi=600)\n        print(f\"Plot saved as test.png\")\n\ntoolbar = Toolbar()\n</pre>  class SelectFilesButton(widgets.Button):     \"\"\"A file widget that leverages tkinter.filedialog.\"\"\"      def __init__(self):         super(SelectFilesButton, self).__init__()         # Add the selected_files trait         self.add_traits(files=traitlets.traitlets.List())         # Create the button.         self.description = \"Select Files\"         self.icon = \"square-o\"         # Set on click behavior.         self.on_click(self.select_files)      @staticmethod     def select_files(b):         \"\"\"Generate instance of tkinter.filedialog.          Parameters         ----------         b : obj:             An instance of ipywidgets.widgets.Button          \"\"\"         # Create Tk root         root = Tk()         # Hide the main window         root.withdraw()         # Raise the root to the top of all windows.         root.call('wm', 'attributes', '.', '-topmost', True)         # List of selected fileswill be set to b.value         b.files = filedialog.askopenfilename(multiple=True)          b.description = \"Files Selected\"         b.icon = \"check-square-o\"         b.style.button_color = \"lightgreen\"  class Toolbar:     def __init__(self):         self.create_widgets()         self.setup_interactive_plot()          # Observe the changes in the fileuploader.files and call open_file         self.fileuploader.observe(self.open_file, names='files')      ## create buttons     def create_widgets(self):         self.fileuploader = SelectFilesButton()         self.plot_button = widgets.Button(description=\"Plot\")         self.save_button = widgets.Button(description=\"Save\")         self.plot_button.on_click(self.plot)         self.save_button.on_click(self.save)         self.layerselector = widgets.Dropdown(             options=[\"No file uploaded\"],             value=None,             description=\"Layer:\"         )      ## define toolbar layout     def setup_interactive_plot(self):         display(self.fileuploader, self.layerselector, self.plot_button, self.save_button)      ## define open file event     def open_file(self, change):         self.ds_list = self.fileuploader.files         self.update_dropdown()      def update_dropdown(self):         if len(self.ds_list) &gt; 0:             file_names = [os.path.basename(file_path) for file_path in self.ds_list]             self.layerselector.options = file_names             self.layerselector.value = file_names[0]         else:             self.layerselector.options = [\"No file uploaded\"]             self.layerselector.value = None      def read_and_plot_file(self, file_path):         if file_path.endswith(\".nc\"):             ds = nc.Dataset(file_path)             lat = ds.variables['lat'][:]             lon = ds.variables['lon'][:]             var = ds.variables['lwe_thickness'][:]             var = var.reshape((len(lat), len(lon)))             lons,lats= np.meshgrid(lon,lat)             ax = plt.axes(projection=ccrs.PlateCarree())          elif file_path.endswith(\".tif\"):             ds = gdal.Open(file_path)             col, row, band = ds.RasterXSize, ds.RasterYSize, ds.RasterCount             var = ds.GetRasterBand(1).ReadAsArray()             xoff, a, b, yoff, d, e = ds.GetGeoTransform()             def pixel2coord(x, y):              \"\"\"Returns global coordinates from coordinates x,y of the pixel\"\"\"              xp = a * x + b * y + xoff              yp = d * x + e * y + yoff             return(xp, yp)             x,y = pixel2coord(col/2,row/2)             ax = plt.axes(projection=ccrs.PlateCarree())         else:             print(\"File type not supported\")             return                   plt.contourf(lons, lats, var, 60, transform=ccrs.PlateCarree())         plt.colorbar()         plt.show()      def plot(self, event=None):         selected_file_name = self.layerselector.value         selected_file_index = self.layerselector.options.index(selected_file_name)         selected_file_path = self.ds_list[selected_file_index]         self.read_and_plot_file(selected_file_path)      def save(self, event=None):         plt.savefig(f\"test.png\", dpi=600)         print(f\"Plot saved as test.png\")  toolbar = Toolbar()  In\u00a0[11]: Copied! <pre>path = './data/grace_tif/GRD-3_2018152-2018181_GRFO_UTCSR_BA01_0600_LND_v04.tif'\n</pre> path = './data/grace_tif/GRD-3_2018152-2018181_GRFO_UTCSR_BA01_0600_LND_v04.tif' In\u00a0[12]: Copied! <pre>import lidario as lio\ntranslator = lio.Translator(\"geotiff\", \"np\")\npoint_cloud = translator.translate(input_values=path, no_data=2, band=1)\n</pre> import lidario as lio translator = lio.Translator(\"geotiff\", \"np\") point_cloud = translator.translate(input_values=path, no_data=2, band=1) In\u00a0[13]: Copied! <pre>import rasterio\n</pre> import rasterio In\u00a0[14]: Copied! <pre>meta = get_metadata(path)\n</pre> meta = get_metadata(path) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[14], line 1\n----&gt; 1 meta = get_metadata(path)\n\nNameError: name 'get_metadata' is not defined</pre> In\u00a0[15]: Copied! <pre>lon = point_cloud[:, 0]\nlat = point_cloud[:, 1]\nvar = rasterio.open(path).read(1)\nlons,lats= np.meshgrid(lon,lat)\nax = plt.axes(projection=ccrs.PlateCarree())\nplt.contourf(lons, lats, var, 60, transform=ccrs.PlateCarree())\nplt.colorbar()\nplt.show()\n</pre> lon = point_cloud[:, 0] lat = point_cloud[:, 1] var = rasterio.open(path).read(1) lons,lats= np.meshgrid(lon,lat) ax = plt.axes(projection=ccrs.PlateCarree()) plt.contourf(lons, lats, var, 60, transform=ccrs.PlateCarree()) plt.colorbar() plt.show() <pre>\n---------------------------------------------------------------------------\nMemoryError                               Traceback (most recent call last)\nCell In[15], line 4\n      2 lat = point_cloud[:, 1]\n      3 var = rasterio.open(path).read(1)\n----&gt; 4 lons,lats= np.meshgrid(lon,lat)\n      5 ax = plt.axes(projection=ccrs.PlateCarree())\n      6 plt.contourf(lons, lats, var, 60, transform=ccrs.PlateCarree())\n\nFile &lt;__array_function__ internals&gt;:200, in meshgrid(*args, **kwargs)\n\nFile ~/.local/lib/python3.9/site-packages/numpy/lib/function_base.py:5045, in meshgrid(copy, sparse, indexing, *xi)\n   5042     output = np.broadcast_arrays(*output, subok=True)\n   5044 if copy:\n-&gt; 5045     output = [x.copy() for x in output]\n   5047 return output\n\nFile ~/.local/lib/python3.9/site-packages/numpy/lib/function_base.py:5045, in &lt;listcomp&gt;(.0)\n   5042     output = np.broadcast_arrays(*output, subok=True)\n   5044 if copy:\n-&gt; 5045     output = [x.copy() for x in output]\n   5047 return output\n\nMemoryError: Unable to allocate 31.3 GiB for an array with shape (64800, 64800) and data type float64</pre> In\u00a0[20]: Copied! <pre>\n</pre> In\u00a0[16]: Copied! <pre>file_path = ' ./data/grace_nc/test1.nc'\n</pre> file_path = ' ./data/grace_nc/test1.nc' In\u00a0[17]: Copied! <pre>import numpy.ma as ma\nds = nc.Dataset(file_path)\nlat = ds.variables['lat'][:]\nlon = ds.variables['lon'][:]\nvar = rasterio.open(path).read(1)\nvar = ma.masked_values(var, -99999)\nlons,lats= np.meshgrid(lon,lat)\nax = plt.axes(projection=ccrs.PlateCarree())\nplt.contourf(lons, lats, var, 60, transform=ccrs.PlateCarree())\nplt.colorbar()\nplt.show()\n</pre> import numpy.ma as ma ds = nc.Dataset(file_path) lat = ds.variables['lat'][:] lon = ds.variables['lon'][:] var = rasterio.open(path).read(1) var = ma.masked_values(var, -99999) lons,lats= np.meshgrid(lon,lat) ax = plt.axes(projection=ccrs.PlateCarree()) plt.contourf(lons, lats, var, 60, transform=ccrs.PlateCarree()) plt.colorbar() plt.show()   <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[17], line 8\n      6 var = ma.masked_values(var, -99999)\n      7 lons,lats= np.meshgrid(lon,lat)\n----&gt; 8 ax = plt.axes(projection=ccrs.PlateCarree())\n      9 plt.contourf(lons, lats, var, 60, transform=ccrs.PlateCarree())\n     10 plt.colorbar()\n\nNameError: name 'ccrs' is not defined</pre> In\u00a0[18]: Copied! <pre>file_path = ' ./data/grace_nc/test1.nc'\nds = nc.Dataset(file_path)\nlat = ds.variables['lat'][:]\nlon = ds.variables['lon'][:]\nvar = ds.variables['lwe_thickness'][:]\nvar = var.reshape((len(lat), len(lon)))\n</pre> file_path = ' ./data/grace_nc/test1.nc' ds = nc.Dataset(file_path) lat = ds.variables['lat'][:] lon = ds.variables['lon'][:] var = ds.variables['lwe_thickness'][:] var = var.reshape((len(lat), len(lon))) In\u00a0[19]: Copied! <pre>len(var)\n</pre> len(var) Out[19]: <pre>180</pre> In\u00a0[20]: Copied! <pre>len(var)\n</pre> len(var) Out[20]: <pre>180</pre>"}]}